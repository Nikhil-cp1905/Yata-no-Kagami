
YataNoKagami.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080089a0  080089a0  000099a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a00  08008a00  0000a0fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a00  08008a00  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a08  08008a08  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a08  08008a08  00009a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008a10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015cc  200000fc  08008b0c  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016c8  08008b0c  0000a6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014813  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394b  00000000  00000000  0001e93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00022290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3c  00000000  00000000  00023550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a93b  00000000  00000000  0002438c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bf1  00000000  00000000  0003ecc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009add2  00000000  00000000  000568b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f168a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cfc  00000000  00000000  000f16d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f63cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008988 	.word	0x08008988

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008988 	.word	0x08008988

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000512:	4b22      	ldr	r3, [pc, #136]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000514:	4a22      	ldr	r2, [pc, #136]	@ (80005a0 <MX_ADC1_Init+0xa0>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b20      	ldr	r3, [pc, #128]	@ (800059c <MX_ADC1_Init+0x9c>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1e      	ldr	r3, [pc, #120]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000526:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1b      	ldr	r3, [pc, #108]	@ (800059c <MX_ADC1_Init+0x9c>)
 800052e:	2200      	movs	r2, #0
 8000530:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b1a      	ldr	r3, [pc, #104]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800053a:	4b18      	ldr	r3, [pc, #96]	@ (800059c <MX_ADC1_Init+0x9c>)
 800053c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000542:	4b16      	ldr	r3, [pc, #88]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000544:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b14      	ldr	r3, [pc, #80]	@ (800059c <MX_ADC1_Init+0x9c>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000558:	2201      	movs	r2, #1
 800055a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000560:	2201      	movs	r2, #1
 8000562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000566:	f000 fd77 	bl	8001058 <HAL_ADC_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000570:	f000 f95a 	bl	8000828 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000574:	2303      	movs	r3, #3
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000586:	f000 fdab 	bl	80010e0 <HAL_ADC_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000590:	f000 f94a 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000118 	.word	0x20000118
 80005a0:	40012000 	.word	0x40012000

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <HAL_ADC_MspInit+0xd8>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d156      	bne.n	8000674 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 80005d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a25      	ldr	r2, [pc, #148]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <HAL_ADC_MspInit+0xdc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005fe:	2308      	movs	r3, #8
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000602:	2303      	movs	r3, #3
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <HAL_ADC_MspInit+0xe0>)
 8000612:	f001 fb7f 	bl	8001d14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000618:	4a1c      	ldr	r2, [pc, #112]	@ (800068c <HAL_ADC_MspInit+0xe8>)
 800061a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800062e:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000634:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800063c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000644:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000646:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800064c:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 800065a:	f001 f871 	bl	8001740 <HAL_DMA_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000664:	f000 f8e0 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38
 800066e:	4a06      	ldr	r2, [pc, #24]	@ (8000688 <HAL_ADC_MspInit+0xe4>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	@ 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40012000 	.word	0x40012000
 8000680:	40023800 	.word	0x40023800
 8000684:	40020000 	.word	0x40020000
 8000688:	20000160 	.word	0x20000160
 800068c:	40026410 	.word	0x40026410

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_DMA_Init+0x3c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a0b      	ldr	r2, [pc, #44]	@ (80006cc <MX_DMA_Init+0x3c>)
 80006a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_DMA_Init+0x3c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2038      	movs	r0, #56	@ 0x38
 80006b8:	f001 f80b 	bl	80016d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006bc:	2038      	movs	r0, #56	@ 0x38
 80006be:	f001 f824 	bl	800170a <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_GPIO_Init+0x4c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <MX_GPIO_Init+0x4c>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_GPIO_Init+0x4c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <MX_GPIO_Init+0x4c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fc02 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f812 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ffd0 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f7ff ffae 	bl	8000690 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000734:	f007 fc12 	bl	8007f5c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000738:	f000 f8fa 	bl	8000930 <MX_TIM2_Init>
  MX_TIM3_Init();
 800073c:	f000 f970 	bl	8000a20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000740:	f000 f9e4 	bl	8000b0c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000744:	f000 fa54 	bl	8000bf0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000748:	f7ff feda 	bl	8000500 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <main+0x2c>

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f008 f8e6 	bl	8008930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <SystemClock_Config+0xd0>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <SystemClock_Config+0xd0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <SystemClock_Config+0xd4>)
 800079e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <SystemClock_Config+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007c4:	2319      	movs	r3, #25
 80007c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fe70 	bl	80034c0 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e6:	f000 f81f 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2102      	movs	r1, #2
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f8d2 	bl	80039b0 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000812:	f000 f809 	bl	8000828 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3750      	adds	r7, #80	@ 0x50
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <UsageFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008da:	f000 fb79 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008e8:	4802      	ldr	r0, [pc, #8]	@ (80008f4 <DMA2_Stream0_IRQHandler+0x10>)
 80008ea:	f000 ffd7 	bl	800189c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000160 	.word	0x20000160

080008f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <OTG_FS_IRQHandler+0x10>)
 80008fe:	f001 fcd1 	bl	80022a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000fc4 	.word	0x20000fc4

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	@ 0x38
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 8000962:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000966:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000968:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 630000-1;
 8000974:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 8000976:	4a29      	ldr	r2, [pc, #164]	@ (8000a1c <MX_TIM2_Init+0xec>)
 8000978:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000986:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 8000988:	f003 f9ca 	bl	8003d20 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000992:	f7ff ff49 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800099c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481d      	ldr	r0, [pc, #116]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 80009a4:	f003 fb26 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009ae:	f7ff ff3b 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009b2:	4819      	ldr	r0, [pc, #100]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 80009b4:	f003 fa03 	bl	8003dbe <HAL_TIM_PWM_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009be:	f7ff ff33 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80009c2:	2310      	movs	r3, #16
 80009c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	4619      	mov	r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 80009d2:	f003 ff57 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80009dc:	f7ff ff24 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e0:	2360      	movs	r3, #96	@ 0x60
 80009e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 840-1;
 80009e4:	f240 3347 	movw	r3, #839	@ 0x347
 80009e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 80009fa:	f003 fa39 	bl	8003e70 <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a04:	f7ff ff10 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <MX_TIM2_Init+0xe8>)
 8000a0a:	f000 f9e1 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000a0e:	bf00      	nop
 8000a10:	3738      	adds	r7, #56	@ 0x38
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200001c0 	.word	0x200001c0
 8000a1c:	00099cef 	.word	0x00099cef

08000a20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	@ 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	615a      	str	r2, [r3, #20]
 8000a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a52:	4a2d      	ldr	r2, [pc, #180]	@ (8000b08 <MX_TIM3_Init+0xe8>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a56:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42-1;
 8000a62:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a64:	2229      	movs	r2, #41	@ 0x29
 8000a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a74:	4823      	ldr	r0, [pc, #140]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a76:	f003 f953 	bl	8003d20 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000a80:	f7ff fed2 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481c      	ldr	r0, [pc, #112]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000a92:	f003 faaf 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000a9c:	f7ff fec4 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000aa2:	f003 f98c 	bl	8003dbe <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000aac:	f7ff febc 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4619      	mov	r1, r3
 8000abe:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000ac0:	f003 fee0 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000aca:	f7ff fead 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	@ 0x60
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21-1;
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000ae6:	f003 f9c3 	bl	8003e70 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000af0:	f7ff fe9a 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000af4:	4803      	ldr	r0, [pc, #12]	@ (8000b04 <MX_TIM3_Init+0xe4>)
 8000af6:	f000 f96b 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	@ 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000208 	.word	0x20000208
 8000b08:	40000400 	.word	0x40000400

08000b0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8000bec <MX_TIM4_Init+0xe0>)
 8000b40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b42:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 8000b4e:	4b26      	ldr	r3, [pc, #152]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b50:	22a7      	movs	r2, #167	@ 0xa7
 8000b52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b60:	4821      	ldr	r0, [pc, #132]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b62:	f003 f8dd 	bl	8003d20 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000b6c:	f7ff fe5c 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481a      	ldr	r0, [pc, #104]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b7e:	f003 fa39 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000b88:	f7ff fe4e 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b8c:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000b8e:	f003 f916 	bl	8003dbe <HAL_TIM_PWM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000b98:	f7ff fe46 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000bac:	f003 fe6a 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000bb6:	f7ff fe37 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	2360      	movs	r3, #96	@ 0x60
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 8000bbe:	2329      	movs	r3, #41	@ 0x29
 8000bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	220c      	movs	r2, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_TIM4_Init+0xdc>)
 8000bd2:	f003 f94d 	bl	8003e70 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000bdc:	f7ff fe24 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3738      	adds	r7, #56	@ 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000250 	.word	0x20000250
 8000bec:	40000800 	.word	0x40000800

08000bf0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b092      	sub	sp, #72	@ 0x48
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c30:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c32:	4a35      	ldr	r2, [pc, #212]	@ (8000d08 <MX_TIM5_Init+0x118>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c36:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1680-1;
 8000c42:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c44:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000c48:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c56:	482b      	ldr	r0, [pc, #172]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c58:	f003 f862 	bl	8003d20 <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000c62:	f7ff fde1 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c70:	4619      	mov	r1, r3
 8000c72:	4824      	ldr	r0, [pc, #144]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c74:	f003 f9be 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000c7e:	f7ff fdd3 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000c82:	4820      	ldr	r0, [pc, #128]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000c84:	f003 f89b 	bl	8003dbe <HAL_TIM_PWM_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000c8e:	f7ff fdcb 	bl	8000828 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c92:	2306      	movs	r3, #6
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4818      	ldr	r0, [pc, #96]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000ca2:	f003 fa6e 	bl	8004182 <HAL_TIM_SlaveConfigSynchro>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8000cac:	f7ff fdbc 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4811      	ldr	r0, [pc, #68]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000cc0:	f003 fde0 	bl	8004884 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000cca:	f7ff fdad 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	@ 0x60
 8000cd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 336-1;
 8000cd2:	f240 134f 	movw	r3, #335	@ 0x14f
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4807      	ldr	r0, [pc, #28]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000ce8:	f003 f8c2 	bl	8003e70 <HAL_TIM_PWM_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8000cf2:	f7ff fd99 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000cf6:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <MX_TIM5_Init+0x114>)
 8000cf8:	f000 f86a 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000cfc:	bf00      	nop
 8000cfe:	3748      	adds	r7, #72	@ 0x48
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000298 	.word	0x20000298
 8000d08:	40000c00 	.word	0x40000c00

08000d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d1c:	d10e      	bne.n	8000d3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	4b27      	ldr	r3, [pc, #156]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2e:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000d3a:	e03a      	b.n	8000db2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a20      	ldr	r2, [pc, #128]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xb8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10e      	bne.n	8000d64 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
}
 8000d62:	e026      	b.n	8000db2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM4)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a17      	ldr	r2, [pc, #92]	@ (8000dc8 <HAL_TIM_Base_MspInit+0xbc>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10e      	bne.n	8000d8c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
}
 8000d8a:	e012      	b.n	8000db2 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM5)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <HAL_TIM_Base_MspInit+0xc0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10d      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
}
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40000400 	.word	0x40000400
 8000dc8:	40000800 	.word	0x40000800
 8000dcc:	40000c00 	.word	0x40000c00

08000dd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df0:	d11e      	bne.n	8000e30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a33      	ldr	r2, [pc, #204]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b31      	ldr	r3, [pc, #196]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4828      	ldr	r0, [pc, #160]	@ (8000ecc <HAL_TIM_MspPostInit+0xfc>)
 8000e2a:	f000 ff73 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000e2e:	e046      	b.n	8000ebe <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a26      	ldr	r2, [pc, #152]	@ (8000ed0 <HAL_TIM_MspPostInit+0x100>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d11e      	bne.n	8000e78 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e56:	2340      	movs	r3, #64	@ 0x40
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e66:	2302      	movs	r3, #2
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4816      	ldr	r0, [pc, #88]	@ (8000ecc <HAL_TIM_MspPostInit+0xfc>)
 8000e72:	f000 ff4f 	bl	8001d14 <HAL_GPIO_Init>
}
 8000e76:	e022      	b.n	8000ebe <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM5)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <HAL_TIM_MspPostInit+0x104>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11d      	bne.n	8000ebe <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_TIM_MspPostInit+0xf8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <HAL_TIM_MspPostInit+0xfc>)
 8000eba:	f000 ff2b 	bl	8001d14 <HAL_GPIO_Init>
}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	40000c00 	.word	0x40000c00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000edc:	f7ff fd16 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f06:	f007 fd1b 	bl	8008940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fc09 	bl	8000720 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000f1c:	08008a10 	.word	0x08008a10
  ldr r2, =_sbss
 8000f20:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000f24:	200016c8 	.word	0x200016c8

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 fbb1 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fc68 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fbc9 	bl	8001726 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fac:	f000 fb91 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	200002e0 	.word	0x200002e0

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200002e0 	.word	0x200002e0

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e033      	b.n	80010d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fa94 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d118      	bne.n	80010c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800109e:	f023 0302 	bic.w	r3, r3, #2
 80010a2:	f043 0202 	orr.w	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f93a 	bl	8001324 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f023 0303 	bic.w	r3, r3, #3
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80010c6:	e001      	b.n	80010cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x1c>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e105      	b.n	8001308 <HAL_ADC_ConfigChannel+0x228>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b09      	cmp	r3, #9
 800110a:	d925      	bls.n	8001158 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68d9      	ldr	r1, [r3, #12]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	3b1e      	subs	r3, #30
 8001122:	2207      	movs	r2, #7
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43da      	mvns	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	400a      	ands	r2, r1
 8001130:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68d9      	ldr	r1, [r3, #12]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	4603      	mov	r3, r0
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4403      	add	r3, r0
 800114a:	3b1e      	subs	r3, #30
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	e022      	b.n	800119e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	2207      	movs	r2, #7
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	400a      	ands	r2, r1
 800117a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6919      	ldr	r1, [r3, #16]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	4603      	mov	r3, r0
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4403      	add	r3, r0
 8001194:	409a      	lsls	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d824      	bhi.n	80011f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	3b05      	subs	r3, #5
 80011b8:	221f      	movs	r2, #31
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	400a      	ands	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3b05      	subs	r3, #5
 80011e2:	fa00 f203 	lsl.w	r2, r0, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ee:	e04c      	b.n	800128a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	d824      	bhi.n	8001242 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	3b23      	subs	r3, #35	@ 0x23
 800120a:	221f      	movs	r2, #31
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43da      	mvns	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	400a      	ands	r2, r1
 8001218:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	3b23      	subs	r3, #35	@ 0x23
 8001234:	fa00 f203 	lsl.w	r2, r0, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001240:	e023      	b.n	800128a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b41      	subs	r3, #65	@ 0x41
 8001254:	221f      	movs	r2, #31
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	400a      	ands	r2, r1
 8001262:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b41      	subs	r3, #65	@ 0x41
 800127e:	fa00 f203 	lsl.w	r2, r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_ADC_ConfigChannel+0x234>)
 800128c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <HAL_ADC_ConfigChannel+0x238>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d109      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1cc>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b12      	cmp	r3, #18
 800129e:	d105      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a19      	ldr	r2, [pc, #100]	@ (8001318 <HAL_ADC_ConfigChannel+0x238>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d123      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x21e>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d003      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x1e6>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b11      	cmp	r3, #17
 80012c4:	d11b      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d111      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <HAL_ADC_ConfigChannel+0x23c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <HAL_ADC_ConfigChannel+0x240>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9a      	lsrs	r2, r3, #18
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40012300 	.word	0x40012300
 8001318:	40012000 	.word	0x40012000
 800131c:	20000000 	.word	0x20000000
 8001320:	431bde83 	.word	0x431bde83

08001324 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800132c:	4b79      	ldr	r3, [pc, #484]	@ (8001514 <ADC_Init+0x1f0>)
 800132e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	431a      	orrs	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	021a      	lsls	r2, r3, #8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800137c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800139e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6899      	ldr	r1, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	4a58      	ldr	r2, [pc, #352]	@ (8001518 <ADC_Init+0x1f4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d022      	beq.n	8001402 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6899      	ldr	r1, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6899      	ldr	r1, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	e00f      	b.n	8001422 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001420:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0202 	bic.w	r2, r2, #2
 8001430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6899      	ldr	r1, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7e1b      	ldrb	r3, [r3, #24]
 800143c:	005a      	lsls	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01b      	beq.n	8001488 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800145e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800146e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6859      	ldr	r1, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	3b01      	subs	r3, #1
 800147c:	035a      	lsls	r2, r3, #13
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	e007      	b.n	8001498 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001496:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	051a      	lsls	r2, r3, #20
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6899      	ldr	r1, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014da:	025a      	lsls	r2, r3, #9
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6899      	ldr	r1, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	029a      	lsls	r2, r3, #10
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40012300 	.word	0x40012300
 8001518:	0f000001 	.word	0x0f000001

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	@ (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	@ (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	@ (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff fc54 	bl	8000ff8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e099      	b.n	8001890 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177c:	e00f      	b.n	800179e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800177e:	f7ff fc3b 	bl	8000ff8 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b05      	cmp	r3, #5
 800178a:	d908      	bls.n	800179e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e078      	b.n	8001890 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e8      	bne.n	800177e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <HAL_DMA_Init+0x158>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d107      	bne.n	8001808 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	4313      	orrs	r3, r2
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f023 0307 	bic.w	r3, r3, #7
 800181e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	2b04      	cmp	r3, #4
 8001830:	d117      	bne.n	8001862 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f9e9 	bl	8001c1c <DMA_CheckFifoParam>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2240      	movs	r2, #64	@ 0x40
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800185e:	2301      	movs	r3, #1
 8001860:	e016      	b.n	8001890 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f9a0 	bl	8001bb0 <DMA_CalcBaseAndBitshift>
 8001870:	4603      	mov	r3, r0
 8001872:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001878:	223f      	movs	r2, #63	@ 0x3f
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	f010803f 	.word	0xf010803f

0800189c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018a8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ae4 <HAL_DMA_IRQHandler+0x248>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a8e      	ldr	r2, [pc, #568]	@ (8001ae8 <HAL_DMA_IRQHandler+0x24c>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0a9b      	lsrs	r3, r3, #10
 80018b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c6:	2208      	movs	r2, #8
 80018c8:	409a      	lsls	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01a      	beq.n	8001908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0204 	bic.w	r2, r2, #4
 80018ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f4:	2208      	movs	r2, #8
 80018f6:	409a      	lsls	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190c:	2201      	movs	r2, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d012      	beq.n	800193e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192a:	2201      	movs	r2, #1
 800192c:	409a      	lsls	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001936:	f043 0202 	orr.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001942:	2204      	movs	r2, #4
 8001944:	409a      	lsls	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d012      	beq.n	8001974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00b      	beq.n	8001974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001960:	2204      	movs	r2, #4
 8001962:	409a      	lsls	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196c:	f043 0204 	orr.w	r2, r3, #4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001978:	2210      	movs	r2, #16
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d043      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03c      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001996:	2210      	movs	r2, #16
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d018      	beq.n	80019de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d108      	bne.n	80019cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d024      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
 80019ca:	e01f      	b.n	8001a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01b      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
 80019dc:	e016      	b.n	8001a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0208 	bic.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a10:	2220      	movs	r2, #32
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 808f 	beq.w	8001b3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8087 	beq.w	8001b3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	2220      	movs	r2, #32
 8001a34:	409a      	lsls	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d136      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0216 	bic.w	r2, r2, #22
 8001a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <HAL_DMA_IRQHandler+0x1da>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0208 	bic.w	r2, r2, #8
 8001a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8a:	223f      	movs	r2, #63	@ 0x3f
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d07e      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
        }
        return;
 8001ab2:	e079      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01d      	beq.n	8001afe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10d      	bne.n	8001aec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d031      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
 8001ae0:	e02c      	b.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d023      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
 8001afc:	e01e      	b.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10f      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0210 	bic.w	r2, r2, #16
 8001b1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d032      	beq.n	8001baa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d022      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2205      	movs	r2, #5
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d307      	bcc.n	8001b84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f2      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x2cc>
 8001b82:	e000      	b.n	8001b86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
 8001ba6:	e000      	b.n	8001baa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ba8:	bf00      	nop
    }
  }
}
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3b10      	subs	r3, #16
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <DMA_CalcBaseAndBitshift+0x64>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bca:	4a13      	ldr	r2, [pc, #76]	@ (8001c18 <DMA_CalcBaseAndBitshift+0x68>)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d909      	bls.n	8001bf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	1d1a      	adds	r2, r3, #4
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bf0:	e007      	b.n	8001c02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	aaaaaaab 	.word	0xaaaaaaab
 8001c18:	080089f8 	.word	0x080089f8

08001c1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d11f      	bne.n	8001c76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d856      	bhi.n	8001cea <DMA_CheckFifoParam+0xce>
 8001c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c44 <DMA_CheckFifoParam+0x28>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c55 	.word	0x08001c55
 8001c48:	08001c67 	.word	0x08001c67
 8001c4c:	08001c55 	.word	0x08001c55
 8001c50:	08001ceb 	.word	0x08001ceb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d046      	beq.n	8001cee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c64:	e043      	b.n	8001cee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c6e:	d140      	bne.n	8001cf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c74:	e03d      	b.n	8001cf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c7e:	d121      	bne.n	8001cc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d837      	bhi.n	8001cf6 <DMA_CheckFifoParam+0xda>
 8001c86:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <DMA_CheckFifoParam+0x70>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001ca3 	.word	0x08001ca3
 8001c94:	08001c9d 	.word	0x08001c9d
 8001c98:	08001cb5 	.word	0x08001cb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca0:	e030      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d025      	beq.n	8001cfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb2:	e022      	b.n	8001cfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cbc:	d11f      	bne.n	8001cfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cc2:	e01c      	b.n	8001cfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d903      	bls.n	8001cd2 <DMA_CheckFifoParam+0xb6>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d003      	beq.n	8001cd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cd0:	e018      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd6:	e015      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce8:	e00b      	b.n	8001d02 <DMA_CheckFifoParam+0xe6>
      break;
 8001cea:	bf00      	nop
 8001cec:	e00a      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      break;
 8001cee:	bf00      	nop
 8001cf0:	e008      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf2:	bf00      	nop
 8001cf4:	e006      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf6:	bf00      	nop
 8001cf8:	e004      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      break;
 8001cfa:	bf00      	nop
 8001cfc:	e002      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cfe:	bf00      	nop
 8001d00:	e000      	b.n	8001d04 <DMA_CheckFifoParam+0xe8>
      break;
 8001d02:	bf00      	nop
    }
  } 
  
  return status; 
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e159      	b.n	8001fe4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8148 	bne.w	8001fde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d005      	beq.n	8001d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d130      	bne.n	8001dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 0201 	and.w	r2, r3, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d017      	beq.n	8001e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d123      	bne.n	8001e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	08da      	lsrs	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3208      	adds	r2, #8
 8001e52:	69b9      	ldr	r1, [r7, #24]
 8001e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a2 	beq.w	8001fde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b57      	ldr	r3, [pc, #348]	@ (8001ffc <HAL_GPIO_Init+0x2e8>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	4a56      	ldr	r2, [pc, #344]	@ (8001ffc <HAL_GPIO_Init+0x2e8>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eaa:	4b54      	ldr	r3, [pc, #336]	@ (8001ffc <HAL_GPIO_Init+0x2e8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb6:	4a52      	ldr	r2, [pc, #328]	@ (8002000 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a49      	ldr	r2, [pc, #292]	@ (8002004 <HAL_GPIO_Init+0x2f0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x202>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a48      	ldr	r2, [pc, #288]	@ (8002008 <HAL_GPIO_Init+0x2f4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x1fe>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a47      	ldr	r2, [pc, #284]	@ (800200c <HAL_GPIO_Init+0x2f8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x1fa>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a46      	ldr	r2, [pc, #280]	@ (8002010 <HAL_GPIO_Init+0x2fc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x1f6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a45      	ldr	r2, [pc, #276]	@ (8002014 <HAL_GPIO_Init+0x300>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x1f2>
 8001f02:	2304      	movs	r3, #4
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	@ (8002000 <HAL_GPIO_Init+0x2ec>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f60:	4b2d      	ldr	r3, [pc, #180]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f84:	4a24      	ldr	r2, [pc, #144]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8a:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fae:	4a1a      	ldr	r2, [pc, #104]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <HAL_GPIO_Init+0x304>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f aea2 	bls.w	8001d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e101      	b.n	8002232 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f006 f967 	bl	800831c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800205c:	d102      	bne.n	8002064 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fd90 	bl	8004b8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7c1a      	ldrb	r2, [r3, #16]
 8002076:	f88d 2000 	strb.w	r2, [sp]
 800207a:	3304      	adds	r3, #4
 800207c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207e:	f002 fc6f 	bl	8004960 <USB_CoreInit>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0ce      	b.n	8002232 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fd88 	bl	8004bb0 <USB_SetCurrentMode>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0bf      	b.n	8002232 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e04a      	b.n	800214e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3315      	adds	r3, #21
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3314      	adds	r3, #20
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	b298      	uxth	r0, r3
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	332e      	adds	r3, #46	@ 0x2e
 80020f4:	4602      	mov	r2, r0
 80020f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	3318      	adds	r3, #24
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	331c      	adds	r3, #28
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3320      	adds	r3, #32
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	3324      	adds	r3, #36	@ 0x24
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3301      	adds	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	791b      	ldrb	r3, [r3, #4]
 8002152:	7bfa      	ldrb	r2, [r7, #15]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3af      	bcc.n	80020b8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e044      	b.n	80021e8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	3301      	adds	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3b5      	bcc.n	800215e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	7c1a      	ldrb	r2, [r3, #16]
 80021fa:	f88d 2000 	strb.w	r2, [sp]
 80021fe:	3304      	adds	r3, #4
 8002200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002202:	f002 fd21 	bl	8004c48 <USB_DevInit>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e00c      	b.n	8002232 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fd6b 	bl	8005d06 <USB_DevDisconnect>

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_PCD_Start+0x1c>
 8002252:	2302      	movs	r3, #2
 8002254:	e022      	b.n	800229c <HAL_PCD_Start+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002276:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fc72 	bl	8004b6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fd19 	bl	8005cc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b08d      	sub	sp, #52	@ 0x34
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f003 fdd7 	bl	8005e6e <USB_GetMode>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 848c 	bne.w	8002be0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 fd3b 	bl	8005d48 <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 8482 	beq.w	8002bde <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fd28 	bl	8005d48 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d107      	bne.n	8002312 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 0202 	and.w	r2, r2, #2
 8002310:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fd16 	bl	8005d48 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b10      	cmp	r3, #16
 8002324:	d161      	bne.n	80023ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800235c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002360:	d124      	bne.n	80023ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d035      	beq.n	80023da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	6a38      	ldr	r0, [r7, #32]
 8002382:	f003 fb4d 	bl	8005a20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002392:	441a      	add	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a4:	441a      	add	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	615a      	str	r2, [r3, #20]
 80023aa:	e016      	b.n	80023da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80023b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80023b6:	d110      	bne.n	80023da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023be:	2208      	movs	r2, #8
 80023c0:	4619      	mov	r1, r3
 80023c2:	6a38      	ldr	r0, [r7, #32]
 80023c4:	f003 fb2c 	bl	8005a20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d4:	441a      	add	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0210 	orr.w	r2, r2, #16
 80023e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 fcaa 	bl	8005d48 <USB_ReadInterrupts>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023fe:	f040 80a7 	bne.w	8002550 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fcaf 	bl	8005d6e <USB_ReadDevAllOutEpInterrupt>
 8002410:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002412:	e099      	b.n	8002548 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 808e 	beq.w	800253c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fcd3 	bl	8005dd6 <USB_ReadDevOutEPInterrupt>
 8002430:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00c      	beq.n	8002456 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002448:	461a      	mov	r2, r3
 800244a:	2301      	movs	r3, #1
 800244c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800244e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fea3 	bl	800319c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2308      	movs	r3, #8
 8002470:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002472:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 ff79 	bl	800336c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2310      	movs	r3, #16
 8002494:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d030      	beq.n	8002502 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a8:	2b80      	cmp	r3, #128	@ 0x80
 80024aa:	d109      	bne.n	80024c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2200      	movs	r2, #0
 80024e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f006 f812 	bl	8008514 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	2302      	movs	r3, #2
 8002500:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002518:	461a      	mov	r2, r3
 800251a:	2320      	movs	r3, #32
 800251c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002534:	461a      	mov	r2, r3
 8002536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800253a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f af62 	bne.w	8002414 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fbf7 	bl	8005d48 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002564:	f040 80db 	bne.w	800271e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f003 fc18 	bl	8005da2 <USB_ReadDevAllInEpInterrupt>
 8002572:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002578:	e0cd      	b.n	8002716 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80c2 	beq.w	800270a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fc3e 	bl	8005e12 <USB_ReadDevInEPInterrupt>
 8002596:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d057      	beq.n	8002652 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	2201      	movs	r2, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69f9      	ldr	r1, [r7, #28]
 80025be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025c2:	4013      	ands	r3, r2
 80025c4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025d2:	461a      	mov	r2, r3
 80025d4:	2301      	movs	r3, #1
 80025d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	799b      	ldrb	r3, [r3, #6]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d132      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3320      	adds	r3, #32
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4403      	add	r3, r0
 8002600:	331c      	adds	r3, #28
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4419      	add	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4403      	add	r3, r0
 8002614:	3320      	adds	r3, #32
 8002616:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	2b00      	cmp	r3, #0
 800261c:	d113      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3324      	adds	r3, #36	@ 0x24
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d108      	bne.n	8002646 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800263e:	461a      	mov	r2, r3
 8002640:	2101      	movs	r1, #1
 8002642:	f003 fc45 	bl	8005ed0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f005 fee6 	bl	800841e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002668:	461a      	mov	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002684:	461a      	mov	r2, r3
 8002686:	2310      	movs	r3, #16
 8002688:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026a0:	461a      	mov	r2, r3
 80026a2:	2340      	movs	r3, #64	@ 0x40
 80026a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026b2:	6a38      	ldr	r0, [r7, #32]
 80026b4:	f002 fc2c 	bl	8004f10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	3310      	adds	r3, #16
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	78db      	ldrb	r3, [r3, #3]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2200      	movs	r2, #0
 80026d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f005 ff29 	bl	8008538 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026f2:	461a      	mov	r2, r3
 80026f4:	2302      	movs	r3, #2
 80026f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002702:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fcbd 	bl	8003084 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	3301      	adds	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	f47f af2e 	bne.w	800257a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fb10 	bl	8005d48 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800272e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002732:	d122      	bne.n	800277a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800275a:	2100      	movs	r1, #0
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fea3 	bl	80034a8 <HAL_PCDEx_LPM_Callback>
 8002762:	e002      	b.n	800276a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f005 fec7 	bl	80084f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fae2 	bl	8005d48 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800278a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800278e:	d112      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f005 fe83 	bl	80084ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027b4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fac4 	bl	8005d48 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ca:	f040 80b7 	bne.w	800293c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2110      	movs	r1, #16
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fb91 	bl	8004f10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f2:	e046      	b.n	8002882 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002800:	461a      	mov	r2, r3
 8002802:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002806:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002818:	0151      	lsls	r1, r2, #5
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	440a      	add	r2, r1
 800281e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002822:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002826:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800283a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800284c:	0151      	lsls	r1, r2, #5
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	440a      	add	r2, r1
 8002852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800285a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002876:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800287a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287e:	3301      	adds	r3, #1
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	791b      	ldrb	r3, [r3, #4]
 8002886:	461a      	mov	r2, r3
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	4293      	cmp	r3, r2
 800288c:	d3b2      	bcc.n	80027f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800289c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80028a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7bdb      	ldrb	r3, [r3, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028ba:	f043 030b 	orr.w	r3, r3, #11
 80028be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028d0:	f043 030b 	orr.w	r3, r3, #11
 80028d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028d6:	e015      	b.n	8002904 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028fe:	f043 030b 	orr.w	r3, r3, #11
 8002902:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002912:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002916:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002926:	461a      	mov	r2, r3
 8002928:	f003 fad2 	bl	8005ed0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fa01 	bl	8005d48 <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002950:	d123      	bne.n	800299a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 fa97 	bl	8005e8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fb4e 	bl	8005002 <USB_GetDevSpeed>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681c      	ldr	r4, [r3, #0]
 8002972:	f001 f9c9 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8002976:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800297c:	461a      	mov	r2, r3
 800297e:	4620      	mov	r0, r4
 8002980:	f002 f852 	bl	8004a28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f005 fd72 	bl	800846e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002998:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 f9d2 	bl	8005d48 <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d10a      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f005 fd4f 	bl	8008452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f002 0208 	and.w	r2, r2, #8
 80029c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 f9bd 	bl	8005d48 <USB_ReadInterrupts>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d4:	2b80      	cmp	r3, #128	@ 0x80
 80029d6:	d123      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e4:	2301      	movs	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e8:	e014      	b.n	8002a14 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d105      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fb0a 	bl	8003022 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	3301      	adds	r3, #1
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	791b      	ldrb	r3, [r3, #4]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d3e4      	bcc.n	80029ea <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 f98f 	bl	8005d48 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a34:	d13c      	bne.n	8002ab0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3a:	e02b      	b.n	8002a94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d115      	bne.n	8002a8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da12      	bge.n	8002a8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3317      	adds	r3, #23
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 faca 	bl	8003022 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	3301      	adds	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	791b      	ldrb	r3, [r3, #4]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d3cd      	bcc.n	8002a3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 f947 	bl	8005d48 <USB_ReadInterrupts>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ac4:	d156      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aca:	e045      	b.n	8002b58 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d12e      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002af4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da2b      	bge.n	8002b52 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	0c1a      	lsrs	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002b04:	4053      	eors	r3, r2
 8002b06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d121      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b4e:	6053      	str	r3, [r2, #4]
            break;
 8002b50:	e008      	b.n	8002b64 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	791b      	ldrb	r3, [r3, #4]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d3b3      	bcc.n	8002acc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 f8e5 	bl	8005d48 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b88:	d10a      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f005 fce6 	bl	800855c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 f8cf 	bl	8005d48 <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d115      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f005 fcd6 	bl	8008578 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	e000      	b.n	8002be0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002bde:	bf00      	nop
    }
  }
}
 8002be0:	3734      	adds	r7, #52	@ 0x34
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}

08002be6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_PCD_SetAddress+0x1a>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e012      	b.n	8002c26 <HAL_PCD_SetAddress+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 f82e 	bl	8005c78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	4608      	mov	r0, r1
 8002c38:	4611      	mov	r1, r2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	70fb      	strb	r3, [r7, #3]
 8002c40:	460b      	mov	r3, r1
 8002c42:	803b      	strh	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	da0f      	bge.n	8002c74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	3310      	adds	r3, #16
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	705a      	strb	r2, [r3, #1]
 8002c72:	e00f      	b.n	8002c94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ca0:	883b      	ldrh	r3, [r7, #0]
 8002ca2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	78ba      	ldrb	r2, [r7, #2]
 8002cae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	785b      	ldrb	r3, [r3, #1]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cc2:	78bb      	ldrb	r3, [r7, #2]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d102      	bne.n	8002cce <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_PCD_EP_Open+0xae>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e00e      	b.n	8002cfa <HAL_PCD_EP_Open+0xcc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 f9ae 	bl	800504c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	da0f      	bge.n	8002d36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3310      	adds	r3, #16
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	705a      	strb	r2, [r3, #1]
 8002d34:	e00f      	b.n	8002d56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_PCD_EP_Close+0x6e>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e00e      	b.n	8002d8e <HAL_PCD_EP_Close+0x8c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68f9      	ldr	r1, [r7, #12]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 f9ec 	bl	800515c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	460b      	mov	r3, r1
 8002da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	799b      	ldrb	r3, [r3, #6]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	799b      	ldrb	r3, [r3, #6]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	f002 fa89 	bl	8005314 <USB_EPStartXfer>

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	f003 020f 	and.w	r2, r3, #15
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4c:	7afb      	ldrb	r3, [r7, #11]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3304      	adds	r3, #4
 8002e62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7c:	7afb      	ldrb	r3, [r7, #11]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	799b      	ldrb	r3, [r3, #6]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	799b      	ldrb	r3, [r3, #6]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6979      	ldr	r1, [r7, #20]
 8002ea2:	f002 fa37 	bl	8005314 <USB_EPStartXfer>

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	7912      	ldrb	r2, [r2, #4]
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e04f      	b.n	8002f6e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	da0f      	bge.n	8002ef6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 020f 	and.w	r2, r3, #15
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	3304      	adds	r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	705a      	strb	r2, [r3, #1]
 8002ef4:	e00d      	b.n	8002f12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_PCD_EP_SetStall+0x82>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e01d      	b.n	8002f6e <HAL_PCD_EP_SetStall+0xbe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fdc5 	bl	8005ad0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7999      	ldrb	r1, [r3, #6]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f002 ffb6 	bl	8005ed0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	7912      	ldrb	r2, [r2, #4]
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e042      	b.n	800301a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da0f      	bge.n	8002fbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	3310      	adds	r3, #16
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	705a      	strb	r2, [r3, #1]
 8002fba:	e00f      	b.n	8002fdc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_EP_ClrStall+0x86>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e00e      	b.n	800301a <HAL_PCD_EP_ClrStall+0xa4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f002 fdce 	bl	8005bac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800302e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da0c      	bge.n	8003050 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	3310      	adds	r3, #16
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	3304      	adds	r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e00c      	b.n	800306a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 020f 	and.w	r2, r3, #15
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	3304      	adds	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fbed 	bl	8005850 <USB_EPStopXfer>
 8003076:	4603      	mov	r3, r0
 8003078:	72fb      	strb	r3, [r7, #11]

  return ret;
 800307a:	7afb      	ldrb	r3, [r7, #11]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af02      	add	r7, sp, #8
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3310      	adds	r3, #16
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d901      	bls.n	80030bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e06b      	b.n	8003194 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d902      	bls.n	80030d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	3303      	adds	r3, #3
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e0:	e02a      	b.n	8003138 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d902      	bls.n	80030fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3303      	adds	r3, #3
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4603      	mov	r3, r0
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f002 fc42 	bl	80059a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	441a      	add	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	441a      	add	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	429a      	cmp	r2, r3
 800314c:	d809      	bhi.n	8003162 <PCD_WriteEmptyTxFifo+0xde>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003156:	429a      	cmp	r2, r3
 8003158:	d203      	bcs.n	8003162 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1bf      	bne.n	80030e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	429a      	cmp	r2, r3
 800316c:	d811      	bhi.n	8003192 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	2201      	movs	r2, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	43db      	mvns	r3, r3
 8003188:	6939      	ldr	r1, [r7, #16]
 800318a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800318e:	4013      	ands	r3, r2
 8003190:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	333c      	adds	r3, #60	@ 0x3c
 80031b4:	3304      	adds	r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	799b      	ldrb	r3, [r3, #6]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d17b      	bne.n	80032ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4a61      	ldr	r2, [pc, #388]	@ (8003364 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	f240 80b9 	bls.w	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80b3 	beq.w	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fe:	461a      	mov	r2, r3
 8003200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003204:	6093      	str	r3, [r2, #8]
 8003206:	e0a7      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321e:	461a      	mov	r2, r3
 8003220:	2320      	movs	r3, #32
 8003222:	6093      	str	r3, [r2, #8]
 8003224:	e098      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 8093 	bne.w	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	4a4b      	ldr	r2, [pc, #300]	@ (8003364 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d90f      	bls.n	800325a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003256:	6093      	str	r3, [r2, #8]
 8003258:	e07e      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1a      	ldr	r2, [r3, #32]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	0159      	lsls	r1, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	440b      	add	r3, r1
 800327c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d114      	bne.n	80032bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032a4:	461a      	mov	r2, r3
 80032a6:	2101      	movs	r1, #1
 80032a8:	f002 fe12 	bl	8005ed0 <USB_EP0_OutStart>
 80032ac:	e006      	b.n	80032bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f005 f890 	bl	80083e8 <HAL_PCD_DataOutStageCallback>
 80032c8:	e046      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d124      	bne.n	800331c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e8:	461a      	mov	r2, r3
 80032ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ee:	6093      	str	r3, [r2, #8]
 80032f0:	e032      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003308:	461a      	mov	r2, r3
 800330a:	2320      	movs	r3, #32
 800330c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f005 f867 	bl	80083e8 <HAL_PCD_DataOutStageCallback>
 800331a:	e01d      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d114      	bne.n	800334c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003344:	461a      	mov	r2, r3
 8003346:	2100      	movs	r1, #0
 8003348:	f002 fdc2 	bl	8005ed0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f005 f848 	bl	80083e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	4f54300a 	.word	0x4f54300a
 8003368:	4f54310a 	.word	0x4f54310a

0800336c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	333c      	adds	r3, #60	@ 0x3c
 8003384:	3304      	adds	r3, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a15      	ldr	r2, [pc, #84]	@ (80033f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d90e      	bls.n	80033c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f004 ffff 	bl	80083c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d90c      	bls.n	80033e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	799b      	ldrb	r3, [r3, #6]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d108      	bne.n	80033e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033e0:	461a      	mov	r2, r3
 80033e2:	2101      	movs	r1, #1
 80033e4:	f002 fd74 	bl	8005ed0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	4f54300a 	.word	0x4f54300a

080033f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
 8003404:	4613      	mov	r3, r2
 8003406:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003416:	883b      	ldrh	r3, [r7, #0]
 8003418:	0419      	lsls	r1, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	430a      	orrs	r2, r1
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28
 8003424:	e028      	b.n	8003478 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4413      	add	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e00d      	b.n	8003456 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3340      	adds	r3, #64	@ 0x40
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4413      	add	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	3301      	adds	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	3b01      	subs	r3, #1
 800345c:	429a      	cmp	r2, r3
 800345e:	d3ec      	bcc.n	800343a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003460:	883b      	ldrh	r3, [r7, #0]
 8003462:	0418      	lsls	r0, r3, #16
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	3b01      	subs	r3, #1
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4302      	orrs	r2, r0
 8003470:	3340      	adds	r3, #64	@ 0x40
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e267      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d075      	beq.n	80035ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034de:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00c      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b85      	ldr	r3, [pc, #532]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d112      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b82      	ldr	r3, [pc, #520]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b7e      	ldr	r3, [pc, #504]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e242      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x74>
 8003526:	4b76      	ldr	r3, [pc, #472]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b70      	ldr	r3, [pc, #448]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6f      	ldr	r2, [pc, #444]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b6d      	ldr	r3, [pc, #436]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6c      	ldr	r2, [pc, #432]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003558:	4b69      	ldr	r3, [pc, #420]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a68      	ldr	r2, [pc, #416]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b66      	ldr	r3, [pc, #408]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a65      	ldr	r2, [pc, #404]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fd3e 	bl	8000ff8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fd3a 	bl	8000ff8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e207      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b5b      	ldr	r3, [pc, #364]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xc0>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fd fd2a 	bl	8000ff8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fd fd26 	bl	8000ff8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	@ 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1f3      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b51      	ldr	r3, [pc, #324]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b44      	ldr	r3, [pc, #272]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b3b      	ldr	r3, [pc, #236]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4937      	ldr	r1, [pc, #220]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e03a      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCC_OscConfig+0x244>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fd fcdf 	bl	8000ff8 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363e:	f7fd fcdb 	bl	8000ff8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1a8      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4925      	ldr	r1, [pc, #148]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b24      	ldr	r3, [pc, #144]	@ (8003704 <HAL_RCC_OscConfig+0x244>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fcbe 	bl	8000ff8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003680:	f7fd fcba 	bl	8000ff8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e187      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_RCC_OscConfig+0x248>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd fc9e 	bl	8000ff8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fd fc9a 	bl	8000ff8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e167      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x200>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_OscConfig+0x248>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fc87 	bl	8000ff8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fd fc83 	bl	8000ff8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e150      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	42470000 	.word	0x42470000
 8003708:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8097 	beq.w	8003854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b81      	ldr	r3, [pc, #516]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4a7c      	ldr	r2, [pc, #496]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	@ 0x40
 8003746:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b77      	ldr	r3, [pc, #476]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b74      	ldr	r3, [pc, #464]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fd fc43 	bl	8000ff8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fd fc3f 	bl	8000ff8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b6a      	ldr	r3, [pc, #424]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ea>
 800379c:	4b64      	ldr	r3, [pc, #400]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a0:	4a63      	ldr	r2, [pc, #396]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x30c>
 80037b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037be:	4b5c      	ldr	r3, [pc, #368]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037cc:	4b58      	ldr	r3, [pc, #352]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d8:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a54      	ldr	r2, [pc, #336]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fc04 	bl	8000ff8 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fd fc00 	bl	8000ff8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0cb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x334>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fd fbee 	bl	8000ff8 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fd fbea 	bl	8000ff8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0b5      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b39      	ldr	r3, [pc, #228]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	4a38      	ldr	r2, [pc, #224]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a1 	beq.w	80039a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d05c      	beq.n	8003924 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d141      	bne.n	80038f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b31      	ldr	r3, [pc, #196]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fbbe 	bl	8000ff8 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd fbba 	bl	8000ff8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e087      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	491b      	ldr	r1, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fd fb93 	bl	8000ff8 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fd fb8f 	bl	8000ff8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e05c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x416>
 80038f4:	e054      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd fb7c 	bl	8000ff8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fb78 	bl	8000ff8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x444>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e038      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <HAL_RCC_OscConfig+0x4ec>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d028      	beq.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d121      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d11a      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d111      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cc      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b68      	ldr	r3, [pc, #416]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d90c      	bls.n	80039ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b65      	ldr	r3, [pc, #404]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a58      	ldr	r2, [pc, #352]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a52      	ldr	r2, [pc, #328]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d119      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e067      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4934      	ldr	r1, [pc, #208]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd faaa 	bl	8000ff8 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd faa6 	bl	8000ff8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b25      	ldr	r3, [pc, #148]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b22      	ldr	r3, [pc, #136]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fa0a 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	080089e8 	.word	0x080089e8
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000004 	.word	0x20000004

08003b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b090      	sub	sp, #64	@ 0x40
 8003b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	4b59      	ldr	r3, [pc, #356]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d00d      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	f200 80a1 	bhi.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bae:	e09b      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b53      	ldr	r3, [pc, #332]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bb4:	e09b      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb6:	4b53      	ldr	r3, [pc, #332]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bba:	e098      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003be4:	2100      	movs	r1, #0
 8003be6:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be8:	fb03 f201 	mul.w	r2, r3, r1
 8003bec:	2300      	movs	r3, #0
 8003bee:	fb00 f303 	mul.w	r3, r0, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4a43      	ldr	r2, [pc, #268]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c02:	4413      	add	r3, r2
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c08:	2200      	movs	r2, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	61fa      	str	r2, [r7, #28]
 8003c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c16:	f7fc fadd 	bl	80001d4 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4613      	mov	r3, r2
 8003c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c22:	e053      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c24:	4b35      	ldr	r3, [pc, #212]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	617a      	str	r2, [r7, #20]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c36:	f04f 0b00 	mov.w	fp, #0
 8003c3a:	4652      	mov	r2, sl
 8003c3c:	465b      	mov	r3, fp
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4c:	0150      	lsls	r0, r2, #5
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	ebb2 080a 	subs.w	r8, r2, sl
 8003c56:	eb63 090b 	sbc.w	r9, r3, fp
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c72:	eb63 0509 	sbc.w	r5, r3, r9
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	00eb      	lsls	r3, r5, #3
 8003c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c84:	00e2      	lsls	r2, r4, #3
 8003c86:	4614      	mov	r4, r2
 8003c88:	461d      	mov	r5, r3
 8003c8a:	eb14 030a 	adds.w	r3, r4, sl
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	eb45 030b 	adc.w	r3, r5, fp
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	028b      	lsls	r3, r1, #10
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cac:	4621      	mov	r1, r4
 8003cae:	028a      	lsls	r2, r1, #10
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc0:	f7fc fa88 	bl	80001d4 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3740      	adds	r7, #64	@ 0x40
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	017d7840 	.word	0x017d7840

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000000 	.word	0x20000000

08003d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e041      	b.n	8003db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fc ffe0 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 fa52 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e041      	b.n	8003e54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f839 	bl	8003e5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f000 fa03 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0ae      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	f200 809f 	bhi.w	8003fdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003fdd 	.word	0x08003fdd
 8003eac:	08003fdd 	.word	0x08003fdd
 8003eb0:	08003fdd 	.word	0x08003fdd
 8003eb4:	08003f19 	.word	0x08003f19
 8003eb8:	08003fdd 	.word	0x08003fdd
 8003ebc:	08003fdd 	.word	0x08003fdd
 8003ec0:	08003fdd 	.word	0x08003fdd
 8003ec4:	08003f5b 	.word	0x08003f5b
 8003ec8:	08003fdd 	.word	0x08003fdd
 8003ecc:	08003fdd 	.word	0x08003fdd
 8003ed0:	08003fdd 	.word	0x08003fdd
 8003ed4:	08003f9b 	.word	0x08003f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fa18 	bl	8004314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0208 	orr.w	r2, r2, #8
 8003ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0204 	bic.w	r2, r2, #4
 8003f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6999      	ldr	r1, [r3, #24]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	619a      	str	r2, [r3, #24]
      break;
 8003f16:	e064      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fa5e 	bl	80043e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6999      	ldr	r1, [r3, #24]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	021a      	lsls	r2, r3, #8
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	619a      	str	r2, [r3, #24]
      break;
 8003f58:	e043      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 faa9 	bl	80044b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0208 	orr.w	r2, r2, #8
 8003f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0204 	bic.w	r2, r2, #4
 8003f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69d9      	ldr	r1, [r3, #28]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	61da      	str	r2, [r3, #28]
      break;
 8003f98:	e023      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 faf3 	bl	800458c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69d9      	ldr	r1, [r3, #28]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	021a      	lsls	r2, r3, #8
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	61da      	str	r2, [r3, #28]
      break;
 8003fda:	e002      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIM_ConfigClockSource+0x1c>
 800400c:	2302      	movs	r3, #2
 800400e:	e0b4      	b.n	800417a <HAL_TIM_ConfigClockSource+0x186>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800402e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004048:	d03e      	beq.n	80040c8 <HAL_TIM_ConfigClockSource+0xd4>
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404e:	f200 8087 	bhi.w	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004056:	f000 8086 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x172>
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405e:	d87f      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b70      	cmp	r3, #112	@ 0x70
 8004062:	d01a      	beq.n	800409a <HAL_TIM_ConfigClockSource+0xa6>
 8004064:	2b70      	cmp	r3, #112	@ 0x70
 8004066:	d87b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004068:	2b60      	cmp	r3, #96	@ 0x60
 800406a:	d050      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x11a>
 800406c:	2b60      	cmp	r3, #96	@ 0x60
 800406e:	d877      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004070:	2b50      	cmp	r3, #80	@ 0x50
 8004072:	d03c      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0xfa>
 8004074:	2b50      	cmp	r3, #80	@ 0x50
 8004076:	d873      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d058      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x13a>
 800407c:	2b40      	cmp	r3, #64	@ 0x40
 800407e:	d86f      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b30      	cmp	r3, #48	@ 0x30
 8004082:	d064      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 8004084:	2b30      	cmp	r3, #48	@ 0x30
 8004086:	d86b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d060      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d867      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d05c      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	2b10      	cmp	r3, #16
 8004096:	d05a      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 8004098:	e062      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040aa:	f000 fbca 	bl	8004842 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	609a      	str	r2, [r3, #8]
      break;
 80040c6:	e04f      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040d8:	f000 fbb3 	bl	8004842 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040ea:	609a      	str	r2, [r3, #8]
      break;
 80040ec:	e03c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	461a      	mov	r2, r3
 80040fc:	f000 fb27 	bl	800474e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2150      	movs	r1, #80	@ 0x50
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fb80 	bl	800480c <TIM_ITRx_SetConfig>
      break;
 800410c:	e02c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800411a:	461a      	mov	r2, r3
 800411c:	f000 fb46 	bl	80047ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2160      	movs	r1, #96	@ 0x60
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fb70 	bl	800480c <TIM_ITRx_SetConfig>
      break;
 800412c:	e01c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800413a:	461a      	mov	r2, r3
 800413c:	f000 fb07 	bl	800474e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2140      	movs	r1, #64	@ 0x40
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fb60 	bl	800480c <TIM_ITRx_SetConfig>
      break;
 800414c:	e00c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f000 fb57 	bl	800480c <TIM_ITRx_SetConfig>
      break;
 800415e:	e003      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      break;
 8004164:	e000      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004196:	2302      	movs	r3, #2
 8004198:	e031      	b.n	80041fe <HAL_TIM_SlaveConfigSynchro+0x7c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa3d 	bl	800462c <TIM_SlaveTimer_SetConfig>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e018      	b.n	80041fe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041da:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041ea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a37      	ldr	r2, [pc, #220]	@ (80042f8 <TIM_Base_SetConfig+0xf0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00f      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004226:	d00b      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a34      	ldr	r2, [pc, #208]	@ (80042fc <TIM_Base_SetConfig+0xf4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a33      	ldr	r2, [pc, #204]	@ (8004300 <TIM_Base_SetConfig+0xf8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a32      	ldr	r2, [pc, #200]	@ (8004304 <TIM_Base_SetConfig+0xfc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d108      	bne.n	8004252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <TIM_Base_SetConfig+0xf0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01b      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004260:	d017      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a25      	ldr	r2, [pc, #148]	@ (80042fc <TIM_Base_SetConfig+0xf4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a24      	ldr	r2, [pc, #144]	@ (8004300 <TIM_Base_SetConfig+0xf8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a23      	ldr	r2, [pc, #140]	@ (8004304 <TIM_Base_SetConfig+0xfc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <TIM_Base_SetConfig+0x100>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a21      	ldr	r2, [pc, #132]	@ (800430c <TIM_Base_SetConfig+0x104>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a20      	ldr	r2, [pc, #128]	@ (8004310 <TIM_Base_SetConfig+0x108>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a0c      	ldr	r2, [pc, #48]	@ (80042f8 <TIM_Base_SetConfig+0xf0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d103      	bne.n	80042d2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f043 0204 	orr.w	r2, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40014000 	.word	0x40014000
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800

08004314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f023 0201 	bic.w	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 0302 	bic.w	r3, r3, #2
 800435c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a1c      	ldr	r2, [pc, #112]	@ (80043dc <TIM_OC1_SetConfig+0xc8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10c      	bne.n	800438a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0308 	bic.w	r3, r3, #8
 8004376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a13      	ldr	r2, [pc, #76]	@ (80043dc <TIM_OC1_SetConfig+0xc8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d111      	bne.n	80043b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40010000 	.word	0x40010000

080043e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f023 0210 	bic.w	r2, r3, #16
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1e      	ldr	r2, [pc, #120]	@ (80044b4 <TIM_OC2_SetConfig+0xd4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10d      	bne.n	800445c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a15      	ldr	r2, [pc, #84]	@ (80044b4 <TIM_OC2_SetConfig+0xd4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d113      	bne.n	800448c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800446a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000

080044b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <TIM_OC3_SetConfig+0xd0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <TIM_OC3_SetConfig+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d113      	bne.n	8004562 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40010000 	.word	0x40010000

0800458c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	031b      	lsls	r3, r3, #12
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a10      	ldr	r2, [pc, #64]	@ (8004628 <TIM_OC4_SetConfig+0x9c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d109      	bne.n	8004600 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000

0800462c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004648:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b70      	cmp	r3, #112	@ 0x70
 8004674:	d01a      	beq.n	80046ac <TIM_SlaveTimer_SetConfig+0x80>
 8004676:	2b70      	cmp	r3, #112	@ 0x70
 8004678:	d860      	bhi.n	800473c <TIM_SlaveTimer_SetConfig+0x110>
 800467a:	2b60      	cmp	r3, #96	@ 0x60
 800467c:	d054      	beq.n	8004728 <TIM_SlaveTimer_SetConfig+0xfc>
 800467e:	2b60      	cmp	r3, #96	@ 0x60
 8004680:	d85c      	bhi.n	800473c <TIM_SlaveTimer_SetConfig+0x110>
 8004682:	2b50      	cmp	r3, #80	@ 0x50
 8004684:	d046      	beq.n	8004714 <TIM_SlaveTimer_SetConfig+0xe8>
 8004686:	2b50      	cmp	r3, #80	@ 0x50
 8004688:	d858      	bhi.n	800473c <TIM_SlaveTimer_SetConfig+0x110>
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d019      	beq.n	80046c2 <TIM_SlaveTimer_SetConfig+0x96>
 800468e:	2b40      	cmp	r3, #64	@ 0x40
 8004690:	d854      	bhi.n	800473c <TIM_SlaveTimer_SetConfig+0x110>
 8004692:	2b30      	cmp	r3, #48	@ 0x30
 8004694:	d055      	beq.n	8004742 <TIM_SlaveTimer_SetConfig+0x116>
 8004696:	2b30      	cmp	r3, #48	@ 0x30
 8004698:	d850      	bhi.n	800473c <TIM_SlaveTimer_SetConfig+0x110>
 800469a:	2b20      	cmp	r3, #32
 800469c:	d051      	beq.n	8004742 <TIM_SlaveTimer_SetConfig+0x116>
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d84c      	bhi.n	800473c <TIM_SlaveTimer_SetConfig+0x110>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d04d      	beq.n	8004742 <TIM_SlaveTimer_SetConfig+0x116>
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d04b      	beq.n	8004742 <TIM_SlaveTimer_SetConfig+0x116>
 80046aa:	e047      	b.n	800473c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80046bc:	f000 f8c1 	bl	8004842 <TIM_ETR_SetConfig>
      break;
 80046c0:	e040      	b.n	8004744 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d101      	bne.n	80046ce <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e03b      	b.n	8004746 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046f4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
      break;
 8004712:	e017      	b.n	8004744 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004720:	461a      	mov	r2, r3
 8004722:	f000 f814 	bl	800474e <TIM_TI1_ConfigInputStage>
      break;
 8004726:	e00d      	b.n	8004744 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004734:	461a      	mov	r2, r3
 8004736:	f000 f839 	bl	80047ac <TIM_TI2_ConfigInputStage>
      break;
 800473a:	e003      	b.n	8004744 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	e000      	b.n	8004744 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004742:	bf00      	nop
  }

  return status;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474e:	b480      	push	{r7}
 8004750:	b087      	sub	sp, #28
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 0201 	bic.w	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 030a 	bic.w	r3, r3, #10
 800478a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	621a      	str	r2, [r3, #32]
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0210 	bic.w	r2, r3, #16
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	031b      	lsls	r3, r3, #12
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	621a      	str	r2, [r3, #32]
}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	f043 0307 	orr.w	r3, r3, #7
 800482e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	609a      	str	r2, [r3, #8]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004842:	b480      	push	{r7}
 8004844:	b087      	sub	sp, #28
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800485c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	021a      	lsls	r2, r3, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	431a      	orrs	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4313      	orrs	r3, r2
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	609a      	str	r2, [r3, #8]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004898:	2302      	movs	r3, #2
 800489a:	e050      	b.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1c      	ldr	r2, [pc, #112]	@ (800494c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d018      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e8:	d013      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a16      	ldr	r2, [pc, #88]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a15      	ldr	r2, [pc, #84]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a13      	ldr	r2, [pc, #76]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d10c      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40014000 	.word	0x40014000

08004960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004960:	b084      	sub	sp, #16
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	f107 001c 	add.w	r0, r7, #28
 800496e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004972:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004976:	2b01      	cmp	r3, #1
 8004978:	d123      	bne.n	80049c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800498e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fae8 	bl	8005f8c <USB_CoreReset>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	e01b      	b.n	80049fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fadc 	bl	8005f8c <USB_CoreReset>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80049ec:	e005      	b.n	80049fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049fa:	7fbb      	ldrb	r3, [r7, #30]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10b      	bne.n	8004a18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f043 0206 	orr.w	r2, r3, #6
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a24:	b004      	add	sp, #16
 8004a26:	4770      	bx	lr

08004a28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d165      	bne.n	8004b08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4a41      	ldr	r2, [pc, #260]	@ (8004b44 <USB_SetTurnaroundTime+0x11c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d906      	bls.n	8004a52 <USB_SetTurnaroundTime+0x2a>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4a40      	ldr	r2, [pc, #256]	@ (8004b48 <USB_SetTurnaroundTime+0x120>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d202      	bcs.n	8004a52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a4c:	230f      	movs	r3, #15
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e062      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a3c      	ldr	r2, [pc, #240]	@ (8004b48 <USB_SetTurnaroundTime+0x120>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d306      	bcc.n	8004a68 <USB_SetTurnaroundTime+0x40>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b4c <USB_SetTurnaroundTime+0x124>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d202      	bcs.n	8004a68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a62:	230e      	movs	r3, #14
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e057      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a38      	ldr	r2, [pc, #224]	@ (8004b4c <USB_SetTurnaroundTime+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d306      	bcc.n	8004a7e <USB_SetTurnaroundTime+0x56>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a37      	ldr	r2, [pc, #220]	@ (8004b50 <USB_SetTurnaroundTime+0x128>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d202      	bcs.n	8004a7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a78:	230d      	movs	r3, #13
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e04c      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4a33      	ldr	r2, [pc, #204]	@ (8004b50 <USB_SetTurnaroundTime+0x128>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d306      	bcc.n	8004a94 <USB_SetTurnaroundTime+0x6c>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4a32      	ldr	r2, [pc, #200]	@ (8004b54 <USB_SetTurnaroundTime+0x12c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d802      	bhi.n	8004a94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a8e:	230c      	movs	r3, #12
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e041      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4a2f      	ldr	r2, [pc, #188]	@ (8004b54 <USB_SetTurnaroundTime+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d906      	bls.n	8004aaa <USB_SetTurnaroundTime+0x82>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b58 <USB_SetTurnaroundTime+0x130>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d802      	bhi.n	8004aaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004aa4:	230b      	movs	r3, #11
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e036      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <USB_SetTurnaroundTime+0x130>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d906      	bls.n	8004ac0 <USB_SetTurnaroundTime+0x98>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a29      	ldr	r2, [pc, #164]	@ (8004b5c <USB_SetTurnaroundTime+0x134>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d802      	bhi.n	8004ac0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aba:	230a      	movs	r3, #10
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e02b      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4a26      	ldr	r2, [pc, #152]	@ (8004b5c <USB_SetTurnaroundTime+0x134>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d906      	bls.n	8004ad6 <USB_SetTurnaroundTime+0xae>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4a25      	ldr	r2, [pc, #148]	@ (8004b60 <USB_SetTurnaroundTime+0x138>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d202      	bcs.n	8004ad6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ad0:	2309      	movs	r3, #9
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e020      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4a21      	ldr	r2, [pc, #132]	@ (8004b60 <USB_SetTurnaroundTime+0x138>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d306      	bcc.n	8004aec <USB_SetTurnaroundTime+0xc4>
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	@ (8004b64 <USB_SetTurnaroundTime+0x13c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d802      	bhi.n	8004aec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e015      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a1d      	ldr	r2, [pc, #116]	@ (8004b64 <USB_SetTurnaroundTime+0x13c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d906      	bls.n	8004b02 <USB_SetTurnaroundTime+0xda>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b68 <USB_SetTurnaroundTime+0x140>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d202      	bcs.n	8004b02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004afc:	2307      	movs	r3, #7
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e00a      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b02:	2306      	movs	r3, #6
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e007      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b0e:	2309      	movs	r3, #9
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e001      	b.n	8004b18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b14:	2309      	movs	r3, #9
 8004b16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	00d8acbf 	.word	0x00d8acbf
 8004b48:	00e4e1c0 	.word	0x00e4e1c0
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	01067380 	.word	0x01067380
 8004b54:	011a499f 	.word	0x011a499f
 8004b58:	01312cff 	.word	0x01312cff
 8004b5c:	014ca43f 	.word	0x014ca43f
 8004b60:	016e3600 	.word	0x016e3600
 8004b64:	01a6ab1f 	.word	0x01a6ab1f
 8004b68:	01e84800 	.word	0x01e84800

08004b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f043 0201 	orr.w	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d115      	bne.n	8004bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bde:	200a      	movs	r0, #10
 8004be0:	f7fc fa16 	bl	8001010 <HAL_Delay>
      ms += 10U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	330a      	adds	r3, #10
 8004be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 f93f 	bl	8005e6e <USB_GetMode>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d01e      	beq.n	8004c34 <USB_SetCurrentMode+0x84>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bfa:	d9f0      	bls.n	8004bde <USB_SetCurrentMode+0x2e>
 8004bfc:	e01a      	b.n	8004c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d115      	bne.n	8004c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c10:	200a      	movs	r0, #10
 8004c12:	f7fc f9fd 	bl	8001010 <HAL_Delay>
      ms += 10U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	330a      	adds	r3, #10
 8004c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 f926 	bl	8005e6e <USB_GetMode>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <USB_SetCurrentMode+0x84>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c2c:	d9f0      	bls.n	8004c10 <USB_SetCurrentMode+0x60>
 8004c2e:	e001      	b.n	8004c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e005      	b.n	8004c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c38:	d101      	bne.n	8004c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c48:	b084      	sub	sp, #16
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e009      	b.n	8004c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3340      	adds	r3, #64	@ 0x40
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	2200      	movs	r2, #0
 8004c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0e      	cmp	r3, #14
 8004c80:	d9f2      	bls.n	8004c68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11c      	bne.n	8004cc4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004cc2:	e00b      	b.n	8004cdc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ce8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10d      	bne.n	8004d0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f968 	bl	8004fd0 <USB_SetDevSpeed>
 8004d00:	e008      	b.n	8004d14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d02:	2101      	movs	r1, #1
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f963 	bl	8004fd0 <USB_SetDevSpeed>
 8004d0a:	e003      	b.n	8004d14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d0c:	2103      	movs	r1, #3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f95e 	bl	8004fd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d14:	2110      	movs	r1, #16
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8fa 	bl	8004f10 <USB_FlushTxFifo>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f924 	bl	8004f74 <USB_FlushRxFifo>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d54:	461a      	mov	r2, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	e043      	b.n	8004de8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d76:	d118      	bne.n	8004daa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e013      	b.n	8004dbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da0:	461a      	mov	r2, r3
 8004da2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e008      	b.n	8004dbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db6:	461a      	mov	r2, r3
 8004db8:	2300      	movs	r3, #0
 8004dba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004de0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	3301      	adds	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004dec:	461a      	mov	r2, r3
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d3b5      	bcc.n	8004d60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e043      	b.n	8004e82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e10:	d118      	bne.n	8004e44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e24:	461a      	mov	r2, r3
 8004e26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e013      	b.n	8004e56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e008      	b.n	8004e56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e74:	461a      	mov	r2, r3
 8004e76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e86:	461a      	mov	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d3b5      	bcc.n	8004dfa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004eae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f043 0210 	orr.w	r2, r3, #16
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699a      	ldr	r2, [r3, #24]
 8004ec8:	4b10      	ldr	r3, [pc, #64]	@ (8004f0c <USB_DevInit+0x2c4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f043 0208 	orr.w	r2, r3, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ee4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d107      	bne.n	8004efc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f08:	b004      	add	sp, #16
 8004f0a:	4770      	bx	lr
 8004f0c:	803c3800 	.word	0x803c3800

08004f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f2a:	d901      	bls.n	8004f30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e01b      	b.n	8004f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	daf2      	bge.n	8004f1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	019b      	lsls	r3, r3, #6
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f54:	d901      	bls.n	8004f5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e006      	b.n	8004f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d0f0      	beq.n	8004f48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f8c:	d901      	bls.n	8004f92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e018      	b.n	8004fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	daf2      	bge.n	8004f80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2210      	movs	r2, #16
 8004fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb0:	d901      	bls.n	8004fb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e006      	b.n	8004fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d0f0      	beq.n	8004fa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0306 	and.w	r3, r3, #6
 800501a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
 8005026:	e00a      	b.n	800503e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d002      	beq.n	8005034 <USB_GetDevSpeed+0x32>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b06      	cmp	r3, #6
 8005032:	d102      	bne.n	800503a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005034:	2302      	movs	r3, #2
 8005036:	75fb      	strb	r3, [r7, #23]
 8005038:	e001      	b.n	800503e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800503a:	230f      	movs	r3, #15
 800503c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800503e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005040:	4618      	mov	r0, r3
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d13a      	bne.n	80050de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 030f 	and.w	r3, r3, #15
 8005078:	2101      	movs	r1, #1
 800507a:	fa01 f303 	lsl.w	r3, r1, r3
 800507e:	b29b      	uxth	r3, r3
 8005080:	68f9      	ldr	r1, [r7, #12]
 8005082:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005086:	4313      	orrs	r3, r2
 8005088:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d155      	bne.n	800514c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	791b      	ldrb	r3, [r3, #4]
 80050ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	059b      	lsls	r3, r3, #22
 80050c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050c4:	4313      	orrs	r3, r2
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e036      	b.n	800514c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	2101      	movs	r1, #1
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11a      	bne.n	800514c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	791b      	ldrb	r3, [r3, #4]
 8005130:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005132:	430b      	orrs	r3, r1
 8005134:	4313      	orrs	r3, r2
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800514a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d161      	bne.n	800523c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800518a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800518e:	d11f      	bne.n	80051d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	2101      	movs	r1, #1
 80051e2:	fa01 f303 	lsl.w	r3, r1, r3
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051f0:	4013      	ands	r3, r2
 80051f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	2101      	movs	r1, #1
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	b29b      	uxth	r3, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005214:	4013      	ands	r3, r2
 8005216:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	0159      	lsls	r1, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	440b      	add	r3, r1
 800522e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005232:	4619      	mov	r1, r3
 8005234:	4b35      	ldr	r3, [pc, #212]	@ (800530c <USB_DeactivateEndpoint+0x1b0>)
 8005236:	4013      	ands	r3, r2
 8005238:	600b      	str	r3, [r1, #0]
 800523a:	e060      	b.n	80052fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800524e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005252:	d11f      	bne.n	8005294 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800526e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005272:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800528e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005292:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	2101      	movs	r1, #1
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	43db      	mvns	r3, r3
 80052ae:	68f9      	ldr	r1, [r7, #12]
 80052b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052b4:	4013      	ands	r3, r2
 80052b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	2101      	movs	r1, #1
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	43db      	mvns	r3, r3
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052d8:	4013      	ands	r3, r2
 80052da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	0159      	lsls	r1, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f6:	4619      	mov	r1, r3
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <USB_DeactivateEndpoint+0x1b4>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	ec337800 	.word	0xec337800
 8005310:	eff37800 	.word	0xeff37800

08005314 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08a      	sub	sp, #40	@ 0x28
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	2b01      	cmp	r3, #1
 8005332:	f040 817f 	bne.w	8005634 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d132      	bne.n	80053a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005358:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800535c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539c:	0cdb      	lsrs	r3, r3, #19
 800539e:	04db      	lsls	r3, r3, #19
 80053a0:	6113      	str	r3, [r2, #16]
 80053a2:	e097      	b.n	80054d4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053be:	0cdb      	lsrs	r3, r3, #19
 80053c0:	04db      	lsls	r3, r3, #19
 80053c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d11a      	bne.n	8005424 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d903      	bls.n	8005402 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005420:	6113      	str	r3, [r2, #16]
 8005422:	e044      	b.n	80054ae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4413      	add	r3, r2
 800542e:	1e5a      	subs	r2, r3, #1
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	8afb      	ldrh	r3, [r7, #22]
 800544a:	04d9      	lsls	r1, r3, #19
 800544c:	4ba4      	ldr	r3, [pc, #656]	@ (80056e0 <USB_EPStartXfer+0x3cc>)
 800544e:	400b      	ands	r3, r1
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	0148      	lsls	r0, r1, #5
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	4401      	add	r1, r0
 8005458:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	791b      	ldrb	r3, [r3, #4]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d122      	bne.n	80054ae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005482:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005486:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	8afb      	ldrh	r3, [r7, #22]
 8005498:	075b      	lsls	r3, r3, #29
 800549a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800549e:	69b9      	ldr	r1, [r7, #24]
 80054a0:	0148      	lsls	r0, r1, #5
 80054a2:	69f9      	ldr	r1, [r7, #28]
 80054a4:	4401      	add	r1, r0
 80054a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054aa:	4313      	orrs	r3, r2
 80054ac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c4:	69b9      	ldr	r1, [r7, #24]
 80054c6:	0148      	lsls	r0, r1, #5
 80054c8:	69f9      	ldr	r1, [r7, #28]
 80054ca:	4401      	add	r1, r0
 80054cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054d0:	4313      	orrs	r3, r2
 80054d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d14b      	bne.n	8005572 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	791b      	ldrb	r3, [r3, #4]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d128      	bne.n	8005550 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d110      	bne.n	8005530 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005528:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e00f      	b.n	8005550 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800556a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e166      	b.n	8005840 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800558c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005590:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	791b      	ldrb	r3, [r3, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d015      	beq.n	80055c6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 814e 	beq.w	8005840 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	2101      	movs	r1, #1
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	69f9      	ldr	r1, [r7, #28]
 80055bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055c0:	4313      	orrs	r3, r2
 80055c2:	634b      	str	r3, [r1, #52]	@ 0x34
 80055c4:	e13c      	b.n	8005840 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d110      	bne.n	80055f8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e00f      	b.n	8005618 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005616:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	68d9      	ldr	r1, [r3, #12]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	781a      	ldrb	r2, [r3, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	b298      	uxth	r0, r3
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4603      	mov	r3, r0
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f9b9 	bl	80059a4 <USB_WritePacket>
 8005632:	e105      	b.n	8005840 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564e:	0cdb      	lsrs	r3, r3, #19
 8005650:	04db      	lsls	r3, r3, #19
 8005652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800566e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005672:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005676:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d132      	bne.n	80056e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	0148      	lsls	r0, r1, #5
 80056b0:	69f9      	ldr	r1, [r7, #28]
 80056b2:	4401      	add	r1, r0
 80056b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056b8:	4313      	orrs	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	0151      	lsls	r1, r2, #5
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	440a      	add	r2, r1
 80056d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056da:	6113      	str	r3, [r2, #16]
 80056dc:	e062      	b.n	80057a4 <USB_EPStartXfer+0x490>
 80056de:	bf00      	nop
 80056e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d123      	bne.n	8005734 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005702:	69b9      	ldr	r1, [r7, #24]
 8005704:	0148      	lsls	r0, r1, #5
 8005706:	69f9      	ldr	r1, [r7, #28]
 8005708:	4401      	add	r1, r0
 800570a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800572c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005730:	6113      	str	r3, [r2, #16]
 8005732:	e037      	b.n	80057a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4413      	add	r3, r2
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	8afa      	ldrh	r2, [r7, #22]
 8005750:	fb03 f202 	mul.w	r2, r3, r2
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	8afb      	ldrh	r3, [r7, #22]
 8005768:	04d9      	lsls	r1, r3, #19
 800576a:	4b38      	ldr	r3, [pc, #224]	@ (800584c <USB_EPStartXfer+0x538>)
 800576c:	400b      	ands	r3, r1
 800576e:	69b9      	ldr	r1, [r7, #24]
 8005770:	0148      	lsls	r0, r1, #5
 8005772:	69f9      	ldr	r1, [r7, #28]
 8005774:	4401      	add	r1, r0
 8005776:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800577a:	4313      	orrs	r3, r2
 800577c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005794:	69b9      	ldr	r1, [r7, #24]
 8005796:	0148      	lsls	r0, r1, #5
 8005798:	69f9      	ldr	r1, [r7, #28]
 800579a:	4401      	add	r1, r0
 800579c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057a0:	4313      	orrs	r3, r2
 80057a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10d      	bne.n	80057c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c2:	460a      	mov	r2, r1
 80057c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	791b      	ldrb	r3, [r3, #4]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d128      	bne.n	8005820 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d110      	bne.n	8005800 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e00f      	b.n	8005820 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800583a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800583e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	1ff80000 	.word	0x1ff80000

08005850 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d14a      	bne.n	8005904 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005886:	f040 8086 	bne.w	8005996 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058de:	4293      	cmp	r3, r2
 80058e0:	d902      	bls.n	80058e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
          break;
 80058e6:	e056      	b.n	8005996 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005900:	d0e7      	beq.n	80058d2 <USB_EPStopXfer+0x82>
 8005902:	e048      	b.n	8005996 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800591c:	d13b      	bne.n	8005996 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800593c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005940:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005960:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005964:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005972:	4293      	cmp	r3, r2
 8005974:	d902      	bls.n	800597c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	75fb      	strb	r3, [r7, #23]
          break;
 800597a:	e00c      	b.n	8005996 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005994:	d0e7      	beq.n	8005966 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b089      	sub	sp, #36	@ 0x24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	460b      	mov	r3, r1
 80059b4:	71fb      	strb	r3, [r7, #7]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d123      	bne.n	8005a12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059ca:	88bb      	ldrh	r3, [r7, #4]
 80059cc:	3303      	adds	r3, #3
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e018      	b.n	8005a0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	031a      	lsls	r2, r3, #12
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059e4:	461a      	mov	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	3301      	adds	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3301      	adds	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	3301      	adds	r3, #1
 80059fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3301      	adds	r3, #1
 8005a02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	3301      	adds	r3, #1
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d3e2      	bcc.n	80059d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3724      	adds	r7, #36	@ 0x24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b08b      	sub	sp, #44	@ 0x2c
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	e014      	b.n	8005a76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	3301      	adds	r3, #1
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	3301      	adds	r3, #1
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	3301      	adds	r3, #1
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	6a3a      	ldr	r2, [r7, #32]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d3e6      	bcc.n	8005a4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a7e:	8bfb      	ldrh	r3, [r7, #30]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01e      	beq.n	8005ac2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f107 0310 	add.w	r3, r7, #16
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	701a      	strb	r2, [r3, #0]
      i++;
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	3301      	adds	r3, #1
 8005aae:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ab6:	8bfb      	ldrh	r3, [r7, #30]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005abc:	8bfb      	ldrh	r3, [r7, #30]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1ea      	bne.n	8005a98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	372c      	adds	r7, #44	@ 0x2c
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d12c      	bne.n	8005b46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	db12      	blt.n	8005b24 <USB_EPSetStall+0x54>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00f      	beq.n	8005b24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e02b      	b.n	8005b9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	db12      	blt.n	8005b7e <USB_EPSetStall+0xae>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00f      	beq.n	8005b7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d128      	bne.n	8005c1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005be6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	791b      	ldrb	r3, [r3, #4]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d003      	beq.n	8005bf8 <USB_EPClearStall+0x4c>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	791b      	ldrb	r3, [r3, #4]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d138      	bne.n	8005c6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	e027      	b.n	8005c6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	791b      	ldrb	r3, [r3, #4]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d003      	beq.n	8005c4a <USB_EPClearStall+0x9e>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	791b      	ldrb	r3, [r3, #4]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d10f      	bne.n	8005c6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cf2:	f023 0302 	bic.w	r3, r3, #2
 8005cf6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d20:	f023 0303 	bic.w	r3, r3, #3
 8005d24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d34:	f043 0302 	orr.w	r3, r3, #2
 8005d38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d60:	68fb      	ldr	r3, [r7, #12]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	0c1b      	lsrs	r3, r3, #16
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	b29b      	uxth	r3, r3
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b085      	sub	sp, #20
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e04:	68bb      	ldr	r3, [r7, #8]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b087      	sub	sp, #28
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e42:	01db      	lsls	r3, r3, #7
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e60:	68bb      	ldr	r3, [r7, #8]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	333c      	adds	r3, #60	@ 0x3c
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4a26      	ldr	r2, [pc, #152]	@ (8005f88 <USB_EP0_OutStart+0xb8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d90a      	bls.n	8005f0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f04:	d101      	bne.n	8005f0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e037      	b.n	8005f7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f38:	f043 0318 	orr.w	r3, r3, #24
 8005f3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005f50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f52:	7afb      	ldrb	r3, [r7, #11]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10f      	bne.n	8005f78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5e:	461a      	mov	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005f76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	4f54300a 	.word	0x4f54300a

08005f8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fa4:	d901      	bls.n	8005faa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e022      	b.n	8005ff0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	daf2      	bge.n	8005f98 <USB_CoreReset+0xc>

  count = 10U;
 8005fb2:	230a      	movs	r3, #10
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005fb6:	e002      	b.n	8005fbe <USB_CoreReset+0x32>
  {
    count--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f9      	bne.n	8005fb8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fdc:	d901      	bls.n	8005fe2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e006      	b.n	8005ff0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d0f0      	beq.n	8005fd0 <USB_CoreReset+0x44>

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006008:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800600c:	f002 fc4c 	bl	80088a8 <USBD_static_malloc>
 8006010:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	32b0      	adds	r2, #176	@ 0xb0
 8006022:	2100      	movs	r1, #0
 8006024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006028:	2302      	movs	r3, #2
 800602a:	e0d4      	b.n	80061d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800602c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006030:	2100      	movs	r1, #0
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f002 fc7c 	bl	8008930 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	32b0      	adds	r2, #176	@ 0xb0
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32b0      	adds	r2, #176	@ 0xb0
 8006052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7c1b      	ldrb	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d138      	bne.n	80060d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006064:	4b5e      	ldr	r3, [pc, #376]	@ (80061e0 <USBD_CDC_Init+0x1e4>)
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800606c:	2202      	movs	r2, #2
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f002 faf7 	bl	8008662 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006074:	4b5a      	ldr	r3, [pc, #360]	@ (80061e0 <USBD_CDC_Init+0x1e4>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	3323      	adds	r3, #35	@ 0x23
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800608e:	4b55      	ldr	r3, [pc, #340]	@ (80061e4 <USBD_CDC_Init+0x1e8>)
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006096:	2202      	movs	r2, #2
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f002 fae2 	bl	8008662 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800609e:	4b51      	ldr	r3, [pc, #324]	@ (80061e4 <USBD_CDC_Init+0x1e8>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	f003 020f 	and.w	r2, r3, #15
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80060b6:	2201      	movs	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060ba:	4b4b      	ldr	r3, [pc, #300]	@ (80061e8 <USBD_CDC_Init+0x1ec>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	331c      	adds	r3, #28
 80060d0:	2210      	movs	r2, #16
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e035      	b.n	8006142 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060d6:	4b42      	ldr	r3, [pc, #264]	@ (80061e0 <USBD_CDC_Init+0x1e4>)
 80060d8:	7819      	ldrb	r1, [r3, #0]
 80060da:	2340      	movs	r3, #64	@ 0x40
 80060dc:	2202      	movs	r2, #2
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f002 fabf 	bl	8008662 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060e4:	4b3e      	ldr	r3, [pc, #248]	@ (80061e0 <USBD_CDC_Init+0x1e4>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f003 020f 	and.w	r2, r3, #15
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	3323      	adds	r3, #35	@ 0x23
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060fe:	4b39      	ldr	r3, [pc, #228]	@ (80061e4 <USBD_CDC_Init+0x1e8>)
 8006100:	7819      	ldrb	r1, [r3, #0]
 8006102:	2340      	movs	r3, #64	@ 0x40
 8006104:	2202      	movs	r2, #2
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f002 faab 	bl	8008662 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800610c:	4b35      	ldr	r3, [pc, #212]	@ (80061e4 <USBD_CDC_Init+0x1e8>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006128:	4b2f      	ldr	r3, [pc, #188]	@ (80061e8 <USBD_CDC_Init+0x1ec>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	331c      	adds	r3, #28
 800613e:	2210      	movs	r2, #16
 8006140:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006142:	4b29      	ldr	r3, [pc, #164]	@ (80061e8 <USBD_CDC_Init+0x1ec>)
 8006144:	7819      	ldrb	r1, [r3, #0]
 8006146:	2308      	movs	r3, #8
 8006148:	2203      	movs	r2, #3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f002 fa89 	bl	8008662 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006150:	4b25      	ldr	r3, [pc, #148]	@ (80061e8 <USBD_CDC_Init+0x1ec>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 020f 	and.w	r2, r3, #15
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	3323      	adds	r3, #35	@ 0x23
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	33b0      	adds	r3, #176	@ 0xb0
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80061a0:	2302      	movs	r3, #2
 80061a2:	e018      	b.n	80061d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	7c1b      	ldrb	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061ac:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <USBD_CDC_Init+0x1e8>)
 80061ae:	7819      	ldrb	r1, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f002 fb40 	bl	8008840 <USBD_LL_PrepareReceive>
 80061c0:	e008      	b.n	80061d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061c2:	4b08      	ldr	r3, [pc, #32]	@ (80061e4 <USBD_CDC_Init+0x1e8>)
 80061c4:	7819      	ldrb	r1, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061cc:	2340      	movs	r3, #64	@ 0x40
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f002 fb36 	bl	8008840 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000093 	.word	0x20000093
 80061e4:	20000094 	.word	0x20000094
 80061e8:	20000095 	.word	0x20000095

080061ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80061f8:	4b3a      	ldr	r3, [pc, #232]	@ (80062e4 <USBD_CDC_DeInit+0xf8>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 fa55 	bl	80086ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006204:	4b37      	ldr	r3, [pc, #220]	@ (80062e4 <USBD_CDC_DeInit+0xf8>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3323      	adds	r3, #35	@ 0x23
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800621e:	4b32      	ldr	r3, [pc, #200]	@ (80062e8 <USBD_CDC_DeInit+0xfc>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f002 fa42 	bl	80086ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800622a:	4b2f      	ldr	r3, [pc, #188]	@ (80062e8 <USBD_CDC_DeInit+0xfc>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006246:	4b29      	ldr	r3, [pc, #164]	@ (80062ec <USBD_CDC_DeInit+0x100>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f002 fa2e 	bl	80086ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006252:	4b26      	ldr	r3, [pc, #152]	@ (80062ec <USBD_CDC_DeInit+0x100>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f003 020f 	and.w	r2, r3, #15
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3323      	adds	r3, #35	@ 0x23
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800626c:	4b1f      	ldr	r3, [pc, #124]	@ (80062ec <USBD_CDC_DeInit+0x100>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	f003 020f 	and.w	r2, r3, #15
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	331c      	adds	r3, #28
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	32b0      	adds	r2, #176	@ 0xb0
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01f      	beq.n	80062d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	33b0      	adds	r3, #176	@ 0xb0
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	32b0      	adds	r2, #176	@ 0xb0
 80062b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f002 fb02 	bl	80088c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32b0      	adds	r2, #176	@ 0xb0
 80062ca:	2100      	movs	r1, #0
 80062cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000093 	.word	0x20000093
 80062e8:	20000094 	.word	0x20000094
 80062ec:	20000095 	.word	0x20000095

080062f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	32b0      	adds	r2, #176	@ 0xb0
 8006304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006308:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800631c:	2303      	movs	r3, #3
 800631e:	e0bf      	b.n	80064a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006328:	2b00      	cmp	r3, #0
 800632a:	d050      	beq.n	80063ce <USBD_CDC_Setup+0xde>
 800632c:	2b20      	cmp	r3, #32
 800632e:	f040 80af 	bne.w	8006490 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	88db      	ldrh	r3, [r3, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d03a      	beq.n	80063b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b25b      	sxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	da1b      	bge.n	800637c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	33b0      	adds	r3, #176	@ 0xb0
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800635a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	88d2      	ldrh	r2, [r2, #6]
 8006360:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	88db      	ldrh	r3, [r3, #6]
 8006366:	2b07      	cmp	r3, #7
 8006368:	bf28      	it	cs
 800636a:	2307      	movcs	r3, #7
 800636c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	89fa      	ldrh	r2, [r7, #14]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fd69 	bl	8007e4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800637a:	e090      	b.n	800649e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	785a      	ldrb	r2, [r3, #1]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	88db      	ldrh	r3, [r3, #6]
 800638a:	2b3f      	cmp	r3, #63	@ 0x3f
 800638c:	d803      	bhi.n	8006396 <USBD_CDC_Setup+0xa6>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	e000      	b.n	8006398 <USBD_CDC_Setup+0xa8>
 8006396:	2240      	movs	r2, #64	@ 0x40
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800639e:	6939      	ldr	r1, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80063a6:	461a      	mov	r2, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fd7e 	bl	8007eaa <USBD_CtlPrepareRx>
      break;
 80063ae:	e076      	b.n	800649e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	33b0      	adds	r3, #176	@ 0xb0
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	7850      	ldrb	r0, [r2, #1]
 80063c6:	2200      	movs	r2, #0
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	4798      	blx	r3
      break;
 80063cc:	e067      	b.n	800649e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	2b0b      	cmp	r3, #11
 80063d4:	d851      	bhi.n	800647a <USBD_CDC_Setup+0x18a>
 80063d6:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <USBD_CDC_Setup+0xec>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	08006489 	.word	0x08006489
 80063e4:	0800647b 	.word	0x0800647b
 80063e8:	0800647b 	.word	0x0800647b
 80063ec:	0800647b 	.word	0x0800647b
 80063f0:	0800647b 	.word	0x0800647b
 80063f4:	0800647b 	.word	0x0800647b
 80063f8:	0800647b 	.word	0x0800647b
 80063fc:	0800647b 	.word	0x0800647b
 8006400:	0800647b 	.word	0x0800647b
 8006404:	08006437 	.word	0x08006437
 8006408:	08006461 	.word	0x08006461
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b03      	cmp	r3, #3
 8006416:	d107      	bne.n	8006428 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006418:	f107 030a 	add.w	r3, r7, #10
 800641c:	2202      	movs	r2, #2
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fd13 	bl	8007e4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006426:	e032      	b.n	800648e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fc91 	bl	8007d52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	75fb      	strb	r3, [r7, #23]
          break;
 8006434:	e02b      	b.n	800648e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b03      	cmp	r3, #3
 8006440:	d107      	bne.n	8006452 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006442:	f107 030d 	add.w	r3, r7, #13
 8006446:	2201      	movs	r2, #1
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fcfe 	bl	8007e4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006450:	e01d      	b.n	800648e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fc7c 	bl	8007d52 <USBD_CtlError>
            ret = USBD_FAIL;
 800645a:	2303      	movs	r3, #3
 800645c:	75fb      	strb	r3, [r7, #23]
          break;
 800645e:	e016      	b.n	800648e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b03      	cmp	r3, #3
 800646a:	d00f      	beq.n	800648c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fc6f 	bl	8007d52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006478:	e008      	b.n	800648c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fc68 	bl	8007d52 <USBD_CtlError>
          ret = USBD_FAIL;
 8006482:	2303      	movs	r3, #3
 8006484:	75fb      	strb	r3, [r7, #23]
          break;
 8006486:	e002      	b.n	800648e <USBD_CDC_Setup+0x19e>
          break;
 8006488:	bf00      	nop
 800648a:	e008      	b.n	800649e <USBD_CDC_Setup+0x1ae>
          break;
 800648c:	bf00      	nop
      }
      break;
 800648e:	e006      	b.n	800649e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fc5d 	bl	8007d52 <USBD_CtlError>
      ret = USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	75fb      	strb	r3, [r7, #23]
      break;
 800649c:	bf00      	nop
  }

  return (uint8_t)ret;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	32b0      	adds	r2, #176	@ 0xb0
 80064c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e065      	b.n	800659e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	32b0      	adds	r2, #176	@ 0xb0
 80064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	f003 020f 	and.w	r2, r3, #15
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	3314      	adds	r3, #20
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02f      	beq.n	800655c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	3314      	adds	r3, #20
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	f003 010f 	and.w	r1, r3, #15
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	460b      	mov	r3, r1
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	440b      	add	r3, r1
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4403      	add	r3, r0
 8006524:	331c      	adds	r3, #28
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	fbb2 f1f3 	udiv	r1, r2, r3
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006532:	2b00      	cmp	r3, #0
 8006534:	d112      	bne.n	800655c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	f003 020f 	and.w	r2, r3, #15
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3314      	adds	r3, #20
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800654e:	78f9      	ldrb	r1, [r7, #3]
 8006550:	2300      	movs	r3, #0
 8006552:	2200      	movs	r2, #0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f002 f952 	bl	80087fe <USBD_LL_Transmit>
 800655a:	e01f      	b.n	800659c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	33b0      	adds	r3, #176	@ 0xb0
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	33b0      	adds	r3, #176	@ 0xb0
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	32b0      	adds	r2, #176	@ 0xb0
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	32b0      	adds	r2, #176	@ 0xb0
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e01a      	b.n	800660e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f002 f950 	bl	8008882 <USBD_LL_GetRxDataSize>
 80065e2:	4602      	mov	r2, r0
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	33b0      	adds	r3, #176	@ 0xb0
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006608:	4611      	mov	r1, r2
 800660a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	32b0      	adds	r2, #176	@ 0xb0
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006634:	2303      	movs	r3, #3
 8006636:	e024      	b.n	8006682 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	33b0      	adds	r3, #176	@ 0xb0
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d019      	beq.n	8006680 <USBD_CDC_EP0_RxReady+0x6a>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006652:	2bff      	cmp	r3, #255	@ 0xff
 8006654:	d014      	beq.n	8006680 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	33b0      	adds	r3, #176	@ 0xb0
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800666e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006676:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	22ff      	movs	r2, #255	@ 0xff
 800667c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006694:	2182      	movs	r1, #130	@ 0x82
 8006696:	4818      	ldr	r0, [pc, #96]	@ (80066f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006698:	f000 fd22 	bl	80070e0 <USBD_GetEpDesc>
 800669c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800669e:	2101      	movs	r1, #1
 80066a0:	4815      	ldr	r0, [pc, #84]	@ (80066f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066a2:	f000 fd1d 	bl	80070e0 <USBD_GetEpDesc>
 80066a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066a8:	2181      	movs	r1, #129	@ 0x81
 80066aa:	4813      	ldr	r0, [pc, #76]	@ (80066f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066ac:	f000 fd18 	bl	80070e0 <USBD_GetEpDesc>
 80066b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2210      	movs	r2, #16
 80066bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066cc:	711a      	strb	r2, [r3, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e0:	711a      	strb	r2, [r3, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2243      	movs	r2, #67	@ 0x43
 80066ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066ec:	4b02      	ldr	r3, [pc, #8]	@ (80066f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000050 	.word	0x20000050

080066fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006704:	2182      	movs	r1, #130	@ 0x82
 8006706:	4818      	ldr	r0, [pc, #96]	@ (8006768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006708:	f000 fcea 	bl	80070e0 <USBD_GetEpDesc>
 800670c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800670e:	2101      	movs	r1, #1
 8006710:	4815      	ldr	r0, [pc, #84]	@ (8006768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006712:	f000 fce5 	bl	80070e0 <USBD_GetEpDesc>
 8006716:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006718:	2181      	movs	r1, #129	@ 0x81
 800671a:	4813      	ldr	r0, [pc, #76]	@ (8006768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800671c:	f000 fce0 	bl	80070e0 <USBD_GetEpDesc>
 8006720:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2210      	movs	r2, #16
 800672c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2200      	movs	r2, #0
 8006738:	711a      	strb	r2, [r3, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f042 0202 	orr.w	r2, r2, #2
 8006740:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d006      	beq.n	8006756 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	711a      	strb	r2, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f042 0202 	orr.w	r2, r2, #2
 8006754:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2243      	movs	r2, #67	@ 0x43
 800675a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800675c:	4b02      	ldr	r3, [pc, #8]	@ (8006768 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000050 	.word	0x20000050

0800676c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006774:	2182      	movs	r1, #130	@ 0x82
 8006776:	4818      	ldr	r0, [pc, #96]	@ (80067d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006778:	f000 fcb2 	bl	80070e0 <USBD_GetEpDesc>
 800677c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800677e:	2101      	movs	r1, #1
 8006780:	4815      	ldr	r0, [pc, #84]	@ (80067d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006782:	f000 fcad 	bl	80070e0 <USBD_GetEpDesc>
 8006786:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006788:	2181      	movs	r1, #129	@ 0x81
 800678a:	4813      	ldr	r0, [pc, #76]	@ (80067d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800678c:	f000 fca8 	bl	80070e0 <USBD_GetEpDesc>
 8006790:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2210      	movs	r2, #16
 800679c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d006      	beq.n	80067b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ac:	711a      	strb	r2, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d006      	beq.n	80067c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067c0:	711a      	strb	r2, [r3, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2243      	movs	r2, #67	@ 0x43
 80067ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067cc:	4b02      	ldr	r3, [pc, #8]	@ (80067d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000050 	.word	0x20000050

080067dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	220a      	movs	r2, #10
 80067e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067ea:	4b03      	ldr	r3, [pc, #12]	@ (80067f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	2000000c 	.word	0x2000000c

080067fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800680c:	2303      	movs	r3, #3
 800680e:	e009      	b.n	8006824 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	33b0      	adds	r3, #176	@ 0xb0
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	32b0      	adds	r2, #176	@ 0xb0
 8006846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	e008      	b.n	8006868 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32b0      	adds	r2, #176	@ 0xb0
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	e004      	b.n	80068a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32b0      	adds	r2, #176	@ 0xb0
 80068c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32b0      	adds	r2, #176	@ 0xb0
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	e018      	b.n	8006910 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7c1b      	ldrb	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <USBD_CDC_ReceivePacket+0x68>)
 80068e8:	7819      	ldrb	r1, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 ffa3 	bl	8008840 <USBD_LL_PrepareReceive>
 80068fa:	e008      	b.n	800690e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <USBD_CDC_ReceivePacket+0x68>)
 80068fe:	7819      	ldrb	r1, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006906:	2340      	movs	r3, #64	@ 0x40
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 ff99 	bl	8008840 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000094 	.word	0x20000094

0800691c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	e01f      	b.n	8006974 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	79fa      	ldrb	r2, [r7, #7]
 8006966:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f001 fe13 	bl	8008594 <USBD_LL_Init>
 800696e:	4603      	mov	r3, r0
 8006970:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006990:	2303      	movs	r3, #3
 8006992:	e025      	b.n	80069e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	32ae      	adds	r2, #174	@ 0xae
 80069a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00f      	beq.n	80069d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	32ae      	adds	r2, #174	@ 0xae
 80069ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	f107 020e 	add.w	r2, r7, #14
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fe1b 	bl	800862c <USBD_LL_Start>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a74:	2303      	movs	r3, #3
 8006a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f922 	bl	8007cde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ab6:	f003 031f 	and.w	r3, r3, #31
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d01a      	beq.n	8006af4 <USBD_LL_SetupStage+0x72>
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d822      	bhi.n	8006b08 <USBD_LL_SetupStage+0x86>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <USBD_LL_SetupStage+0x4a>
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d00a      	beq.n	8006ae0 <USBD_LL_SetupStage+0x5e>
 8006aca:	e01d      	b.n	8006b08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fb77 	bl	80071c8 <USBD_StdDevReq>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ade:	e020      	b.n	8006b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fbdf 	bl	80072ac <USBD_StdItfReq>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
      break;
 8006af2:	e016      	b.n	8006b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fc41 	bl	8007384 <USBD_StdEPReq>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
      break;
 8006b06:	e00c      	b.n	8006b22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fde8 	bl	80086ec <USBD_LL_StallEP>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b20:	bf00      	nop
  }

  return ret;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	460b      	mov	r3, r1
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d177      	bne.n	8006c34 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	f040 80a1 	bne.w	8006c9a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	8992      	ldrh	r2, [r2, #12]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d91c      	bls.n	8006b9e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	8992      	ldrh	r2, [r2, #12]
 8006b6c:	1a9a      	subs	r2, r3, r2
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	8992      	ldrh	r2, [r2, #12]
 8006b7a:	441a      	add	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	6919      	ldr	r1, [r3, #16]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	899b      	ldrh	r3, [r3, #12]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bf38      	it	cc
 8006b92:	4613      	movcc	r3, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f001 f9a8 	bl	8007eec <USBD_CtlContinueRx>
 8006b9c:	e07d      	b.n	8006c9a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d014      	beq.n	8006bd6 <USBD_LL_DataOutStage+0xaa>
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d81d      	bhi.n	8006bec <USBD_LL_DataOutStage+0xc0>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <USBD_LL_DataOutStage+0x8e>
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d003      	beq.n	8006bc0 <USBD_LL_DataOutStage+0x94>
 8006bb8:	e018      	b.n	8006bec <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75bb      	strb	r3, [r7, #22]
            break;
 8006bbe:	e018      	b.n	8006bf2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fa6e 	bl	80070ac <USBD_CoreFindIF>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75bb      	strb	r3, [r7, #22]
            break;
 8006bd4:	e00d      	b.n	8006bf2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	4619      	mov	r1, r3
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fa70 	bl	80070c6 <USBD_CoreFindEP>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75bb      	strb	r3, [r7, #22]
            break;
 8006bea:	e002      	b.n	8006bf2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75bb      	strb	r3, [r7, #22]
            break;
 8006bf0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bf2:	7dbb      	ldrb	r3, [r7, #22]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d119      	bne.n	8006c2c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d113      	bne.n	8006c2c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c04:	7dba      	ldrb	r2, [r7, #22]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	32ae      	adds	r2, #174	@ 0xae
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006c14:	7dba      	ldrb	r2, [r7, #22]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c1c:	7dba      	ldrb	r2, [r7, #22]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	32ae      	adds	r2, #174	@ 0xae
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 f96e 	bl	8007f0e <USBD_CtlSendStatus>
 8006c32:	e032      	b.n	8006c9a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fa41 	bl	80070c6 <USBD_CoreFindEP>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c48:	7dbb      	ldrb	r3, [r7, #22]
 8006c4a:	2bff      	cmp	r3, #255	@ 0xff
 8006c4c:	d025      	beq.n	8006c9a <USBD_LL_DataOutStage+0x16e>
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d122      	bne.n	8006c9a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d117      	bne.n	8006c90 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c60:	7dba      	ldrb	r2, [r7, #22]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	32ae      	adds	r2, #174	@ 0xae
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00f      	beq.n	8006c90 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006c70:	7dba      	ldrb	r2, [r7, #22]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c78:	7dba      	ldrb	r2, [r7, #22]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	32ae      	adds	r2, #174	@ 0xae
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	7afa      	ldrb	r2, [r7, #11]
 8006c86:	4611      	mov	r1, r2
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	4798      	blx	r3
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	e000      	b.n	8006c9c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	460b      	mov	r3, r1
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d178      	bne.n	8006daa <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d163      	bne.n	8006d90 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	8992      	ldrh	r2, [r2, #12]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d91c      	bls.n	8006d0e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	8992      	ldrh	r2, [r2, #12]
 8006cdc:	1a9a      	subs	r2, r3, r2
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	8992      	ldrh	r2, [r2, #12]
 8006cea:	441a      	add	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6919      	ldr	r1, [r3, #16]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f001 f8c4 	bl	8007e88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d00:	2300      	movs	r3, #0
 8006d02:	2200      	movs	r2, #0
 8006d04:	2100      	movs	r1, #0
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f001 fd9a 	bl	8008840 <USBD_LL_PrepareReceive>
 8006d0c:	e040      	b.n	8006d90 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	899b      	ldrh	r3, [r3, #12]
 8006d12:	461a      	mov	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d11c      	bne.n	8006d56 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d316      	bcc.n	8006d56 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d20f      	bcs.n	8006d56 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d36:	2200      	movs	r2, #0
 8006d38:	2100      	movs	r1, #0
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f001 f8a4 	bl	8007e88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f001 fd76 	bl	8008840 <USBD_LL_PrepareReceive>
 8006d54:	e01c      	b.n	8006d90 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d10f      	bne.n	8006d82 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d82:	2180      	movs	r1, #128	@ 0x80
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f001 fcb1 	bl	80086ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f001 f8d2 	bl	8007f34 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d03a      	beq.n	8006e10 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f7ff fe30 	bl	8006a00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006da8:	e032      	b.n	8006e10 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006daa:	7afb      	ldrb	r3, [r7, #11]
 8006dac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f986 	bl	80070c6 <USBD_CoreFindEP>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2bff      	cmp	r3, #255	@ 0xff
 8006dc2:	d025      	beq.n	8006e10 <USBD_LL_DataInStage+0x16c>
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d122      	bne.n	8006e10 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d11c      	bne.n	8006e10 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006dd6:	7dfa      	ldrb	r2, [r7, #23]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	32ae      	adds	r2, #174	@ 0xae
 8006ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d014      	beq.n	8006e10 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006de6:	7dfa      	ldrb	r2, [r7, #23]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006dee:	7dfa      	ldrb	r2, [r7, #23]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	32ae      	adds	r2, #174	@ 0xae
 8006df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	7afa      	ldrb	r2, [r7, #11]
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	4798      	blx	r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e06:	7dbb      	ldrb	r3, [r7, #22]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006e0c:	7dbb      	ldrb	r3, [r7, #22]
 8006e0e:	e000      	b.n	8006e12 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d014      	beq.n	8006e80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00e      	beq.n	8006e80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6852      	ldr	r2, [r2, #4]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	4611      	mov	r1, r2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e80:	2340      	movs	r3, #64	@ 0x40
 8006e82:	2200      	movs	r2, #0
 8006e84:	2100      	movs	r1, #0
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fbeb 	bl	8008662 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2240      	movs	r2, #64	@ 0x40
 8006e98:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e9c:	2340      	movs	r3, #64	@ 0x40
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2180      	movs	r1, #128	@ 0x80
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 fbdd 	bl	8008662 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2240      	movs	r2, #64	@ 0x40
 8006eb4:	841a      	strh	r2, [r3, #32]

  return ret;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d006      	beq.n	8006f02 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d106      	bne.n	8006f3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d110      	bne.n	8006f7e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32ae      	adds	r2, #174	@ 0xae
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e01c      	b.n	8006fe4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d115      	bne.n	8006fe2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	32ae      	adds	r2, #174	@ 0xae
 8006fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	32ae      	adds	r2, #174	@ 0xae
 8006fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	4611      	mov	r1, r2
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	32ae      	adds	r2, #174	@ 0xae
 8007002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800700a:	2303      	movs	r3, #3
 800700c:	e01c      	b.n	8007048 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b03      	cmp	r3, #3
 8007018:	d115      	bne.n	8007046 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	32ae      	adds	r2, #174	@ 0xae
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	32ae      	adds	r2, #174	@ 0xae
 8007038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	4611      	mov	r1, r2
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00e      	beq.n	80070a2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6852      	ldr	r2, [r2, #4]
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	4611      	mov	r1, r2
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800709e:	2303      	movs	r3, #3
 80070a0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	885b      	ldrh	r3, [r3, #2]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	7812      	ldrb	r2, [r2, #0]
 8007102:	4293      	cmp	r3, r2
 8007104:	d91f      	bls.n	8007146 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800710c:	e013      	b.n	8007136 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800710e:	f107 030a 	add.w	r3, r7, #10
 8007112:	4619      	mov	r1, r3
 8007114:	6978      	ldr	r0, [r7, #20]
 8007116:	f000 f81b 	bl	8007150 <USBD_GetNextDesc>
 800711a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b05      	cmp	r3, #5
 8007122:	d108      	bne.n	8007136 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	789b      	ldrb	r3, [r3, #2]
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	429a      	cmp	r2, r3
 8007130:	d008      	beq.n	8007144 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	b29a      	uxth	r2, r3
 800713c:	897b      	ldrh	r3, [r7, #10]
 800713e:	429a      	cmp	r2, r3
 8007140:	d8e5      	bhi.n	800710e <USBD_GetEpDesc+0x2e>
 8007142:	e000      	b.n	8007146 <USBD_GetEpDesc+0x66>
          break;
 8007144:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007146:	693b      	ldr	r3, [r7, #16]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	7812      	ldrb	r2, [r2, #0]
 8007166:	4413      	add	r3, r2
 8007168:	b29a      	uxth	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800717a:	68fb      	ldr	r3, [r7, #12]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	3301      	adds	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80071a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	b21a      	sxth	r2, r3
 80071ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071b8:	89fb      	ldrh	r3, [r7, #14]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071de:	2b40      	cmp	r3, #64	@ 0x40
 80071e0:	d005      	beq.n	80071ee <USBD_StdDevReq+0x26>
 80071e2:	2b40      	cmp	r3, #64	@ 0x40
 80071e4:	d857      	bhi.n	8007296 <USBD_StdDevReq+0xce>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00f      	beq.n	800720a <USBD_StdDevReq+0x42>
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d153      	bne.n	8007296 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	32ae      	adds	r2, #174	@ 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
      break;
 8007208:	e04a      	b.n	80072a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b09      	cmp	r3, #9
 8007210:	d83b      	bhi.n	800728a <USBD_StdDevReq+0xc2>
 8007212:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <USBD_StdDevReq+0x50>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	0800726d 	.word	0x0800726d
 800721c:	08007281 	.word	0x08007281
 8007220:	0800728b 	.word	0x0800728b
 8007224:	08007277 	.word	0x08007277
 8007228:	0800728b 	.word	0x0800728b
 800722c:	0800724b 	.word	0x0800724b
 8007230:	08007241 	.word	0x08007241
 8007234:	0800728b 	.word	0x0800728b
 8007238:	08007263 	.word	0x08007263
 800723c:	08007255 	.word	0x08007255
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa3e 	bl	80076c4 <USBD_GetDescriptor>
          break;
 8007248:	e024      	b.n	8007294 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fba3 	bl	8007998 <USBD_SetAddress>
          break;
 8007252:	e01f      	b.n	8007294 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fbe2 	bl	8007a20 <USBD_SetConfig>
 800725c:	4603      	mov	r3, r0
 800725e:	73fb      	strb	r3, [r7, #15]
          break;
 8007260:	e018      	b.n	8007294 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fc85 	bl	8007b74 <USBD_GetConfig>
          break;
 800726a:	e013      	b.n	8007294 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fcb6 	bl	8007be0 <USBD_GetStatus>
          break;
 8007274:	e00e      	b.n	8007294 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fce5 	bl	8007c48 <USBD_SetFeature>
          break;
 800727e:	e009      	b.n	8007294 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fd09 	bl	8007c9a <USBD_ClrFeature>
          break;
 8007288:	e004      	b.n	8007294 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fd60 	bl	8007d52 <USBD_CtlError>
          break;
 8007292:	bf00      	nop
      }
      break;
 8007294:	e004      	b.n	80072a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fd5a 	bl	8007d52 <USBD_CtlError>
      break;
 800729e:	bf00      	nop
  }

  return ret;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop

080072ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d005      	beq.n	80072d2 <USBD_StdItfReq+0x26>
 80072c6:	2b40      	cmp	r3, #64	@ 0x40
 80072c8:	d852      	bhi.n	8007370 <USBD_StdItfReq+0xc4>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <USBD_StdItfReq+0x26>
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d14e      	bne.n	8007370 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d840      	bhi.n	8007362 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	889b      	ldrh	r3, [r3, #4]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d836      	bhi.n	8007358 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	889b      	ldrh	r3, [r3, #4]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff feda 	bl	80070ac <USBD_CoreFindIF>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	2bff      	cmp	r3, #255	@ 0xff
 8007300:	d01d      	beq.n	800733e <USBD_StdItfReq+0x92>
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d11a      	bne.n	800733e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007308:	7bba      	ldrb	r2, [r7, #14]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32ae      	adds	r2, #174	@ 0xae
 800730e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00f      	beq.n	8007338 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007318:	7bba      	ldrb	r2, [r7, #14]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007320:	7bba      	ldrb	r2, [r7, #14]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32ae      	adds	r2, #174	@ 0xae
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007336:	e004      	b.n	8007342 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007338:	2303      	movs	r3, #3
 800733a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800733c:	e001      	b.n	8007342 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800733e:	2303      	movs	r3, #3
 8007340:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	88db      	ldrh	r3, [r3, #6]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d110      	bne.n	800736c <USBD_StdItfReq+0xc0>
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10d      	bne.n	800736c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fddc 	bl	8007f0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007356:	e009      	b.n	800736c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fcf9 	bl	8007d52 <USBD_CtlError>
          break;
 8007360:	e004      	b.n	800736c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fcf4 	bl	8007d52 <USBD_CtlError>
          break;
 800736a:	e000      	b.n	800736e <USBD_StdItfReq+0xc2>
          break;
 800736c:	bf00      	nop
      }
      break;
 800736e:	e004      	b.n	800737a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fced 	bl	8007d52 <USBD_CtlError>
      break;
 8007378:	bf00      	nop
  }

  return ret;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	889b      	ldrh	r3, [r3, #4]
 8007396:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073a0:	2b40      	cmp	r3, #64	@ 0x40
 80073a2:	d007      	beq.n	80073b4 <USBD_StdEPReq+0x30>
 80073a4:	2b40      	cmp	r3, #64	@ 0x40
 80073a6:	f200 8181 	bhi.w	80076ac <USBD_StdEPReq+0x328>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d02a      	beq.n	8007404 <USBD_StdEPReq+0x80>
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	f040 817c 	bne.w	80076ac <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fe84 	bl	80070c6 <USBD_CoreFindEP>
 80073be:	4603      	mov	r3, r0
 80073c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073c2:	7b7b      	ldrb	r3, [r7, #13]
 80073c4:	2bff      	cmp	r3, #255	@ 0xff
 80073c6:	f000 8176 	beq.w	80076b6 <USBD_StdEPReq+0x332>
 80073ca:	7b7b      	ldrb	r3, [r7, #13]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 8172 	bne.w	80076b6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80073d2:	7b7a      	ldrb	r2, [r7, #13]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073da:	7b7a      	ldrb	r2, [r7, #13]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	32ae      	adds	r2, #174	@ 0xae
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8165 	beq.w	80076b6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80073ec:	7b7a      	ldrb	r2, [r7, #13]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32ae      	adds	r2, #174	@ 0xae
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007402:	e158      	b.n	80076b6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	785b      	ldrb	r3, [r3, #1]
 8007408:	2b03      	cmp	r3, #3
 800740a:	d008      	beq.n	800741e <USBD_StdEPReq+0x9a>
 800740c:	2b03      	cmp	r3, #3
 800740e:	f300 8147 	bgt.w	80076a0 <USBD_StdEPReq+0x31c>
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 809b 	beq.w	800754e <USBD_StdEPReq+0x1ca>
 8007418:	2b01      	cmp	r3, #1
 800741a:	d03c      	beq.n	8007496 <USBD_StdEPReq+0x112>
 800741c:	e140      	b.n	80076a0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d002      	beq.n	8007430 <USBD_StdEPReq+0xac>
 800742a:	2b03      	cmp	r3, #3
 800742c:	d016      	beq.n	800745c <USBD_StdEPReq+0xd8>
 800742e:	e02c      	b.n	800748a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00d      	beq.n	8007452 <USBD_StdEPReq+0xce>
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b80      	cmp	r3, #128	@ 0x80
 800743a:	d00a      	beq.n	8007452 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 f953 	bl	80086ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007446:	2180      	movs	r1, #128	@ 0x80
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f94f 	bl	80086ec <USBD_LL_StallEP>
 800744e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007450:	e020      	b.n	8007494 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc7c 	bl	8007d52 <USBD_CtlError>
              break;
 800745a:	e01b      	b.n	8007494 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10e      	bne.n	8007482 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00b      	beq.n	8007482 <USBD_StdEPReq+0xfe>
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b80      	cmp	r3, #128	@ 0x80
 800746e:	d008      	beq.n	8007482 <USBD_StdEPReq+0xfe>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	88db      	ldrh	r3, [r3, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f935 	bl	80086ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fd43 	bl	8007f0e <USBD_CtlSendStatus>

              break;
 8007488:	e004      	b.n	8007494 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc60 	bl	8007d52 <USBD_CtlError>
              break;
 8007492:	bf00      	nop
          }
          break;
 8007494:	e109      	b.n	80076aa <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d002      	beq.n	80074a8 <USBD_StdEPReq+0x124>
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d016      	beq.n	80074d4 <USBD_StdEPReq+0x150>
 80074a6:	e04b      	b.n	8007540 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <USBD_StdEPReq+0x146>
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b80      	cmp	r3, #128	@ 0x80
 80074b2:	d00a      	beq.n	80074ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f917 	bl	80086ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074be:	2180      	movs	r1, #128	@ 0x80
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f913 	bl	80086ec <USBD_LL_StallEP>
 80074c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c8:	e040      	b.n	800754c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc40 	bl	8007d52 <USBD_CtlError>
              break;
 80074d2:	e03b      	b.n	800754c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d136      	bne.n	800754a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 f91d 	bl	800872a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fd0c 	bl	8007f0e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff fde3 	bl	80070c6 <USBD_CoreFindEP>
 8007500:	4603      	mov	r3, r0
 8007502:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007504:	7b7b      	ldrb	r3, [r7, #13]
 8007506:	2bff      	cmp	r3, #255	@ 0xff
 8007508:	d01f      	beq.n	800754a <USBD_StdEPReq+0x1c6>
 800750a:	7b7b      	ldrb	r3, [r7, #13]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d11c      	bne.n	800754a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007510:	7b7a      	ldrb	r2, [r7, #13]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007518:	7b7a      	ldrb	r2, [r7, #13]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	@ 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d010      	beq.n	800754a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007528:	7b7a      	ldrb	r2, [r7, #13]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32ae      	adds	r2, #174	@ 0xae
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800753e:	e004      	b.n	800754a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fc05 	bl	8007d52 <USBD_CtlError>
              break;
 8007548:	e000      	b.n	800754c <USBD_StdEPReq+0x1c8>
              break;
 800754a:	bf00      	nop
          }
          break;
 800754c:	e0ad      	b.n	80076aa <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d002      	beq.n	8007560 <USBD_StdEPReq+0x1dc>
 800755a:	2b03      	cmp	r3, #3
 800755c:	d033      	beq.n	80075c6 <USBD_StdEPReq+0x242>
 800755e:	e099      	b.n	8007694 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <USBD_StdEPReq+0x1f2>
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b80      	cmp	r3, #128	@ 0x80
 800756a:	d004      	beq.n	8007576 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fbef 	bl	8007d52 <USBD_CtlError>
                break;
 8007574:	e093      	b.n	800769e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800757a:	2b00      	cmp	r3, #0
 800757c:	da0b      	bge.n	8007596 <USBD_StdEPReq+0x212>
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	3310      	adds	r3, #16
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	3304      	adds	r3, #4
 8007594:	e00b      	b.n	80075ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4413      	add	r3, r2
 80075ac:	3304      	adds	r3, #4
 80075ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	330e      	adds	r3, #14
 80075ba:	2202      	movs	r2, #2
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fc44 	bl	8007e4c <USBD_CtlSendData>
              break;
 80075c4:	e06b      	b.n	800769e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da11      	bge.n	80075f2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	f003 020f 	and.w	r2, r3, #15
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	440b      	add	r3, r1
 80075e0:	3323      	adds	r3, #35	@ 0x23
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d117      	bne.n	8007618 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fbb1 	bl	8007d52 <USBD_CtlError>
                  break;
 80075f0:	e055      	b.n	800769e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	f003 020f 	and.w	r2, r3, #15
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fb9e 	bl	8007d52 <USBD_CtlError>
                  break;
 8007616:	e042      	b.n	800769e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800761c:	2b00      	cmp	r3, #0
 800761e:	da0b      	bge.n	8007638 <USBD_StdEPReq+0x2b4>
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	3310      	adds	r3, #16
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	3304      	adds	r3, #4
 8007636:	e00b      	b.n	8007650 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	3304      	adds	r3, #4
 8007650:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007652:	7bbb      	ldrb	r3, [r7, #14]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <USBD_StdEPReq+0x2da>
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b80      	cmp	r3, #128	@ 0x80
 800765c:	d103      	bne.n	8007666 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	739a      	strb	r2, [r3, #14]
 8007664:	e00e      	b.n	8007684 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 f87c 	bl	8008768 <USBD_LL_IsStallEP>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2201      	movs	r2, #1
 800767a:	739a      	strb	r2, [r3, #14]
 800767c:	e002      	b.n	8007684 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	330e      	adds	r3, #14
 8007688:	2202      	movs	r2, #2
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fbdd 	bl	8007e4c <USBD_CtlSendData>
              break;
 8007692:	e004      	b.n	800769e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb5b 	bl	8007d52 <USBD_CtlError>
              break;
 800769c:	bf00      	nop
          }
          break;
 800769e:	e004      	b.n	80076aa <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb55 	bl	8007d52 <USBD_CtlError>
          break;
 80076a8:	bf00      	nop
      }
      break;
 80076aa:	e005      	b.n	80076b8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fb4f 	bl	8007d52 <USBD_CtlError>
      break;
 80076b4:	e000      	b.n	80076b8 <USBD_StdEPReq+0x334>
      break;
 80076b6:	bf00      	nop
  }

  return ret;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	885b      	ldrh	r3, [r3, #2]
 80076de:	0a1b      	lsrs	r3, r3, #8
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	2b06      	cmp	r3, #6
 80076e6:	f200 8128 	bhi.w	800793a <USBD_GetDescriptor+0x276>
 80076ea:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <USBD_GetDescriptor+0x2c>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007725 	.word	0x08007725
 80076f8:	08007765 	.word	0x08007765
 80076fc:	0800793b 	.word	0x0800793b
 8007700:	0800793b 	.word	0x0800793b
 8007704:	080078db 	.word	0x080078db
 8007708:	08007907 	.word	0x08007907
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
      break;
 8007722:	e112      	b.n	800794a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7c1b      	ldrb	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10d      	bne.n	8007748 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007734:	f107 0208 	add.w	r2, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	2202      	movs	r2, #2
 8007744:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007746:	e100      	b.n	800794a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	f107 0208 	add.w	r2, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	2202      	movs	r2, #2
 8007760:	701a      	strb	r2, [r3, #0]
      break;
 8007762:	e0f2      	b.n	800794a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	885b      	ldrh	r3, [r3, #2]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b05      	cmp	r3, #5
 800776c:	f200 80ac 	bhi.w	80078c8 <USBD_GetDescriptor+0x204>
 8007770:	a201      	add	r2, pc, #4	@ (adr r2, 8007778 <USBD_GetDescriptor+0xb4>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	08007791 	.word	0x08007791
 800777c:	080077c5 	.word	0x080077c5
 8007780:	080077f9 	.word	0x080077f9
 8007784:	0800782d 	.word	0x0800782d
 8007788:	08007861 	.word	0x08007861
 800778c:	08007895 	.word	0x08007895
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	7c12      	ldrb	r2, [r2, #16]
 80077a8:	f107 0108 	add.w	r1, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b2:	e091      	b.n	80078d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 facb 	bl	8007d52 <USBD_CtlError>
            err++;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	3301      	adds	r3, #1
 80077c0:	72fb      	strb	r3, [r7, #11]
          break;
 80077c2:	e089      	b.n	80078d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e6:	e077      	b.n	80078d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fab1 	bl	8007d52 <USBD_CtlError>
            err++;
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	3301      	adds	r3, #1
 80077f4:	72fb      	strb	r3, [r7, #11]
          break;
 80077f6:	e06f      	b.n	80078d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	7c12      	ldrb	r2, [r2, #16]
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
 8007818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781a:	e05d      	b.n	80078d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa97 	bl	8007d52 <USBD_CtlError>
            err++;
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	3301      	adds	r3, #1
 8007828:	72fb      	strb	r3, [r7, #11]
          break;
 800782a:	e055      	b.n	80078d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	7c12      	ldrb	r2, [r2, #16]
 8007844:	f107 0108 	add.w	r1, r7, #8
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784e:	e043      	b.n	80078d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa7d 	bl	8007d52 <USBD_CtlError>
            err++;
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	3301      	adds	r3, #1
 800785c:	72fb      	strb	r3, [r7, #11]
          break;
 800785e:	e03b      	b.n	80078d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	7c12      	ldrb	r2, [r2, #16]
 8007878:	f107 0108 	add.w	r1, r7, #8
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007882:	e029      	b.n	80078d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa63 	bl	8007d52 <USBD_CtlError>
            err++;
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	3301      	adds	r3, #1
 8007890:	72fb      	strb	r3, [r7, #11]
          break;
 8007892:	e021      	b.n	80078d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	7c12      	ldrb	r2, [r2, #16]
 80078ac:	f107 0108 	add.w	r1, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b6:	e00f      	b.n	80078d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa49 	bl	8007d52 <USBD_CtlError>
            err++;
 80078c0:	7afb      	ldrb	r3, [r7, #11]
 80078c2:	3301      	adds	r3, #1
 80078c4:	72fb      	strb	r3, [r7, #11]
          break;
 80078c6:	e007      	b.n	80078d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa41 	bl	8007d52 <USBD_CtlError>
          err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078d6:	bf00      	nop
      }
      break;
 80078d8:	e037      	b.n	800794a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d109      	bne.n	80078f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ea:	f107 0208 	add.w	r2, r7, #8
 80078ee:	4610      	mov	r0, r2
 80078f0:	4798      	blx	r3
 80078f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078f4:	e029      	b.n	800794a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fa2a 	bl	8007d52 <USBD_CtlError>
        err++;
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	3301      	adds	r3, #1
 8007902:	72fb      	strb	r3, [r7, #11]
      break;
 8007904:	e021      	b.n	800794a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7c1b      	ldrb	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10d      	bne.n	800792a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007916:	f107 0208 	add.w	r2, r7, #8
 800791a:	4610      	mov	r0, r2
 800791c:	4798      	blx	r3
 800791e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	2207      	movs	r2, #7
 8007926:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007928:	e00f      	b.n	800794a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa10 	bl	8007d52 <USBD_CtlError>
        err++;
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	3301      	adds	r3, #1
 8007936:	72fb      	strb	r3, [r7, #11]
      break;
 8007938:	e007      	b.n	800794a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fa08 	bl	8007d52 <USBD_CtlError>
      err++;
 8007942:	7afb      	ldrb	r3, [r7, #11]
 8007944:	3301      	adds	r3, #1
 8007946:	72fb      	strb	r3, [r7, #11]
      break;
 8007948:	bf00      	nop
  }

  if (err != 0U)
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11e      	bne.n	800798e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	88db      	ldrh	r3, [r3, #6]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d016      	beq.n	8007986 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007958:	893b      	ldrh	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00e      	beq.n	800797c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	88da      	ldrh	r2, [r3, #6]
 8007962:	893b      	ldrh	r3, [r7, #8]
 8007964:	4293      	cmp	r3, r2
 8007966:	bf28      	it	cs
 8007968:	4613      	movcs	r3, r2
 800796a:	b29b      	uxth	r3, r3
 800796c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800796e:	893b      	ldrh	r3, [r7, #8]
 8007970:	461a      	mov	r2, r3
 8007972:	68f9      	ldr	r1, [r7, #12]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fa69 	bl	8007e4c <USBD_CtlSendData>
 800797a:	e009      	b.n	8007990 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f9e7 	bl	8007d52 <USBD_CtlError>
 8007984:	e004      	b.n	8007990 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fac1 	bl	8007f0e <USBD_CtlSendStatus>
 800798c:	e000      	b.n	8007990 <USBD_GetDescriptor+0x2cc>
    return;
 800798e:	bf00      	nop
  }
}
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop

08007998 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	889b      	ldrh	r3, [r3, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d131      	bne.n	8007a0e <USBD_SetAddress+0x76>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	88db      	ldrh	r3, [r3, #6]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d12d      	bne.n	8007a0e <USBD_SetAddress+0x76>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	885b      	ldrh	r3, [r3, #2]
 80079b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80079b8:	d829      	bhi.n	8007a0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	885b      	ldrh	r3, [r3, #2]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d104      	bne.n	80079dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f9bc 	bl	8007d52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079da:	e01d      	b.n	8007a18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7bfa      	ldrb	r2, [r7, #15]
 80079e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fee9 	bl	80087c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa8d 	bl	8007f0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a02:	e009      	b.n	8007a18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0c:	e004      	b.n	8007a18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f99e 	bl	8007d52 <USBD_CtlError>
  }
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	4b4e      	ldr	r3, [pc, #312]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007a36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a38:	4b4d      	ldr	r3, [pc, #308]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d905      	bls.n	8007a4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f985 	bl	8007d52 <USBD_CtlError>
    return USBD_FAIL;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e08c      	b.n	8007b66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d002      	beq.n	8007a5e <USBD_SetConfig+0x3e>
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d029      	beq.n	8007ab0 <USBD_SetConfig+0x90>
 8007a5c:	e075      	b.n	8007b4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a5e:	4b44      	ldr	r3, [pc, #272]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d020      	beq.n	8007aa8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a66:	4b42      	ldr	r3, [pc, #264]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a70:	4b3f      	ldr	r3, [pc, #252]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fe ffcd 	bl	8006a16 <USBD_SetClassConfig>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f962 	bl	8007d52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a96:	e065      	b.n	8007b64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fa38 	bl	8007f0e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007aa6:	e05d      	b.n	8007b64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fa30 	bl	8007f0e <USBD_CtlSendStatus>
      break;
 8007aae:	e059      	b.n	8007b64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d112      	bne.n	8007ade <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aca:	4b29      	ldr	r3, [pc, #164]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7fe ffbc 	bl	8006a4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa19 	bl	8007f0e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007adc:	e042      	b.n	8007b64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ade:	4b24      	ldr	r3, [pc, #144]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d02a      	beq.n	8007b42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fe ffaa 	bl	8006a4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007afa:	4b1d      	ldr	r3, [pc, #116]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b04:	4b1a      	ldr	r3, [pc, #104]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fe ff83 	bl	8006a16 <USBD_SetClassConfig>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00f      	beq.n	8007b3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f918 	bl	8007d52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fe ff8f 	bl	8006a4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b38:	e014      	b.n	8007b64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f9e7 	bl	8007f0e <USBD_CtlSendStatus>
      break;
 8007b40:	e010      	b.n	8007b64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9e3 	bl	8007f0e <USBD_CtlSendStatus>
      break;
 8007b48:	e00c      	b.n	8007b64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f900 	bl	8007d52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b52:	4b07      	ldr	r3, [pc, #28]	@ (8007b70 <USBD_SetConfig+0x150>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7fe ff78 	bl	8006a4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	73fb      	strb	r3, [r7, #15]
      break;
 8007b62:	bf00      	nop
  }

  return ret;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	200002e4 	.word	0x200002e4

08007b74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d004      	beq.n	8007b90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f8e2 	bl	8007d52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b8e:	e023      	b.n	8007bd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	dc02      	bgt.n	8007ba2 <USBD_GetConfig+0x2e>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dc03      	bgt.n	8007ba8 <USBD_GetConfig+0x34>
 8007ba0:	e015      	b.n	8007bce <USBD_GetConfig+0x5a>
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d00b      	beq.n	8007bbe <USBD_GetConfig+0x4a>
 8007ba6:	e012      	b.n	8007bce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f948 	bl	8007e4c <USBD_CtlSendData>
        break;
 8007bbc:	e00c      	b.n	8007bd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f940 	bl	8007e4c <USBD_CtlSendData>
        break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8be 	bl	8007d52 <USBD_CtlError>
        break;
 8007bd6:	bf00      	nop
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d81e      	bhi.n	8007c36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	88db      	ldrh	r3, [r3, #6]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d004      	beq.n	8007c0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f8a5 	bl	8007d52 <USBD_CtlError>
        break;
 8007c08:	e01a      	b.n	8007c40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f043 0202 	orr.w	r2, r3, #2
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f90c 	bl	8007e4c <USBD_CtlSendData>
      break;
 8007c34:	e004      	b.n	8007c40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f88a 	bl	8007d52 <USBD_CtlError>
      break;
 8007c3e:	bf00      	nop
  }
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	885b      	ldrh	r3, [r3, #2]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d107      	bne.n	8007c6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f953 	bl	8007f0e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c68:	e013      	b.n	8007c92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	885b      	ldrh	r3, [r3, #2]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d10b      	bne.n	8007c8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	889b      	ldrh	r3, [r3, #4]
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f943 	bl	8007f0e <USBD_CtlSendStatus>
}
 8007c88:	e003      	b.n	8007c92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f860 	bl	8007d52 <USBD_CtlError>
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	3b01      	subs	r3, #1
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d80b      	bhi.n	8007cca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10c      	bne.n	8007cd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f923 	bl	8007f0e <USBD_CtlSendStatus>
      }
      break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f840 	bl	8007d52 <USBD_CtlError>
      break;
 8007cd2:	e000      	b.n	8007cd6 <USBD_ClrFeature+0x3c>
      break;
 8007cd4:	bf00      	nop
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	781a      	ldrb	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fa3d 	bl	8007188 <SWAPBYTE>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	461a      	mov	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff fa30 	bl	8007188 <SWAPBYTE>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7ff fa23 	bl	8007188 <SWAPBYTE>
 8007d42:	4603      	mov	r3, r0
 8007d44:	461a      	mov	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	80da      	strh	r2, [r3, #6]
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d5c:	2180      	movs	r1, #128	@ 0x80
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fcc4 	bl	80086ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fcc0 	bl	80086ec <USBD_LL_StallEP>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d042      	beq.n	8007e10 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007d8e:	6938      	ldr	r0, [r7, #16]
 8007d90:	f000 f842 	bl	8007e18 <USBD_GetLen>
 8007d94:	4603      	mov	r3, r0
 8007d96:	3301      	adds	r3, #1
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9e:	d808      	bhi.n	8007db2 <USBD_GetString+0x3e>
 8007da0:	6938      	ldr	r0, [r7, #16]
 8007da2:	f000 f839 	bl	8007e18 <USBD_GetLen>
 8007da6:	4603      	mov	r3, r0
 8007da8:	3301      	adds	r3, #1
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	e001      	b.n	8007db6 <USBD_GetString+0x42>
 8007db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ddc:	e013      	b.n	8007e06 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	4413      	add	r3, r2
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3301      	adds	r3, #1
 8007dee:	613b      	str	r3, [r7, #16]
    idx++;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	3301      	adds	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	3301      	adds	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e7      	bne.n	8007dde <USBD_GetString+0x6a>
 8007e0e:	e000      	b.n	8007e12 <USBD_GetString+0x9e>
    return;
 8007e10:	bf00      	nop
  }
}
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e28:	e005      	b.n	8007e36 <USBD_GetLen+0x1e>
  {
    len++;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	3301      	adds	r3, #1
 8007e34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f5      	bne.n	8007e2a <USBD_GetLen+0x12>
  }

  return len;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	2100      	movs	r1, #0
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fcc0 	bl	80087fe <USBD_LL_Transmit>

  return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fcaf 	bl	80087fe <USBD_LL_Transmit>

  return USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2203      	movs	r2, #3
 8007eba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	2100      	movs	r1, #0
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fcaf 	bl	8008840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	2100      	movs	r1, #0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fc9e 	bl	8008840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2204      	movs	r2, #4
 8007f1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fc6a 	bl	80087fe <USBD_LL_Transmit>

  return USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2205      	movs	r2, #5
 8007f40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f44:	2300      	movs	r3, #0
 8007f46:	2200      	movs	r2, #0
 8007f48:	2100      	movs	r1, #0
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fc78 	bl	8008840 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f60:	2200      	movs	r2, #0
 8007f62:	4912      	ldr	r1, [pc, #72]	@ (8007fac <MX_USB_DEVICE_Init+0x50>)
 8007f64:	4812      	ldr	r0, [pc, #72]	@ (8007fb0 <MX_USB_DEVICE_Init+0x54>)
 8007f66:	f7fe fcd9 	bl	800691c <USBD_Init>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f70:	f7f8 fc5a 	bl	8000828 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f74:	490f      	ldr	r1, [pc, #60]	@ (8007fb4 <MX_USB_DEVICE_Init+0x58>)
 8007f76:	480e      	ldr	r0, [pc, #56]	@ (8007fb0 <MX_USB_DEVICE_Init+0x54>)
 8007f78:	f7fe fd00 	bl	800697c <USBD_RegisterClass>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f82:	f7f8 fc51 	bl	8000828 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f86:	490c      	ldr	r1, [pc, #48]	@ (8007fb8 <MX_USB_DEVICE_Init+0x5c>)
 8007f88:	4809      	ldr	r0, [pc, #36]	@ (8007fb0 <MX_USB_DEVICE_Init+0x54>)
 8007f8a:	f7fe fc37 	bl	80067fc <USBD_CDC_RegisterInterface>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f94:	f7f8 fc48 	bl	8000828 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f98:	4805      	ldr	r0, [pc, #20]	@ (8007fb0 <MX_USB_DEVICE_Init+0x54>)
 8007f9a:	f7fe fd25 	bl	80069e8 <USBD_Start>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fa4:	f7f8 fc40 	bl	8000828 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fa8:	bf00      	nop
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	200000ac 	.word	0x200000ac
 8007fb0:	200002e8 	.word	0x200002e8
 8007fb4:	20000018 	.word	0x20000018
 8007fb8:	20000098 	.word	0x20000098

08007fbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	4905      	ldr	r1, [pc, #20]	@ (8007fd8 <CDC_Init_FS+0x1c>)
 8007fc4:	4805      	ldr	r0, [pc, #20]	@ (8007fdc <CDC_Init_FS+0x20>)
 8007fc6:	f7fe fc33 	bl	8006830 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fca:	4905      	ldr	r1, [pc, #20]	@ (8007fe0 <CDC_Init_FS+0x24>)
 8007fcc:	4803      	ldr	r0, [pc, #12]	@ (8007fdc <CDC_Init_FS+0x20>)
 8007fce:	f7fe fc51 	bl	8006874 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200009c4 	.word	0x200009c4
 8007fdc:	200002e8 	.word	0x200002e8
 8007fe0:	200005c4 	.word	0x200005c4

08007fe4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	6039      	str	r1, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
 8008000:	4613      	mov	r3, r2
 8008002:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	2b23      	cmp	r3, #35	@ 0x23
 8008008:	d84a      	bhi.n	80080a0 <CDC_Control_FS+0xac>
 800800a:	a201      	add	r2, pc, #4	@ (adr r2, 8008010 <CDC_Control_FS+0x1c>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	080080a1 	.word	0x080080a1
 8008014:	080080a1 	.word	0x080080a1
 8008018:	080080a1 	.word	0x080080a1
 800801c:	080080a1 	.word	0x080080a1
 8008020:	080080a1 	.word	0x080080a1
 8008024:	080080a1 	.word	0x080080a1
 8008028:	080080a1 	.word	0x080080a1
 800802c:	080080a1 	.word	0x080080a1
 8008030:	080080a1 	.word	0x080080a1
 8008034:	080080a1 	.word	0x080080a1
 8008038:	080080a1 	.word	0x080080a1
 800803c:	080080a1 	.word	0x080080a1
 8008040:	080080a1 	.word	0x080080a1
 8008044:	080080a1 	.word	0x080080a1
 8008048:	080080a1 	.word	0x080080a1
 800804c:	080080a1 	.word	0x080080a1
 8008050:	080080a1 	.word	0x080080a1
 8008054:	080080a1 	.word	0x080080a1
 8008058:	080080a1 	.word	0x080080a1
 800805c:	080080a1 	.word	0x080080a1
 8008060:	080080a1 	.word	0x080080a1
 8008064:	080080a1 	.word	0x080080a1
 8008068:	080080a1 	.word	0x080080a1
 800806c:	080080a1 	.word	0x080080a1
 8008070:	080080a1 	.word	0x080080a1
 8008074:	080080a1 	.word	0x080080a1
 8008078:	080080a1 	.word	0x080080a1
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080a1 	.word	0x080080a1
 8008084:	080080a1 	.word	0x080080a1
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a1 	.word	0x080080a1
 8008090:	080080a1 	.word	0x080080a1
 8008094:	080080a1 	.word	0x080080a1
 8008098:	080080a1 	.word	0x080080a1
 800809c:	080080a1 	.word	0x080080a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080a0:	bf00      	nop
  }

  return (USBD_OK);
 80080a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4805      	ldr	r0, [pc, #20]	@ (80080d4 <CDC_Receive_FS+0x24>)
 80080be:	f7fe fbd9 	bl	8006874 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080c2:	4804      	ldr	r0, [pc, #16]	@ (80080d4 <CDC_Receive_FS+0x24>)
 80080c4:	f7fe fbf4 	bl	80068b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200002e8 	.word	0x200002e8

080080d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2212      	movs	r2, #18
 800810c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800810e:	4b03      	ldr	r3, [pc, #12]	@ (800811c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	200000c8 	.word	0x200000c8

08008120 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2204      	movs	r2, #4
 8008130:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	200000dc 	.word	0x200000dc

08008144 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d105      	bne.n	8008162 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	4907      	ldr	r1, [pc, #28]	@ (8008178 <USBD_FS_ProductStrDescriptor+0x34>)
 800815a:	4808      	ldr	r0, [pc, #32]	@ (800817c <USBD_FS_ProductStrDescriptor+0x38>)
 800815c:	f7ff fe0a 	bl	8007d74 <USBD_GetString>
 8008160:	e004      	b.n	800816c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	4904      	ldr	r1, [pc, #16]	@ (8008178 <USBD_FS_ProductStrDescriptor+0x34>)
 8008166:	4805      	ldr	r0, [pc, #20]	@ (800817c <USBD_FS_ProductStrDescriptor+0x38>)
 8008168:	f7ff fe04 	bl	8007d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800816c:	4b02      	ldr	r3, [pc, #8]	@ (8008178 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000dc4 	.word	0x20000dc4
 800817c:	080089a0 	.word	0x080089a0

08008180 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	4904      	ldr	r1, [pc, #16]	@ (80081a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008190:	4804      	ldr	r0, [pc, #16]	@ (80081a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008192:	f7ff fdef 	bl	8007d74 <USBD_GetString>
  return USBD_StrDesc;
 8008196:	4b02      	ldr	r3, [pc, #8]	@ (80081a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000dc4 	.word	0x20000dc4
 80081a4:	080089b8 	.word	0x080089b8

080081a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	221a      	movs	r2, #26
 80081b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081ba:	f000 f843 	bl	8008244 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081be:	4b02      	ldr	r3, [pc, #8]	@ (80081c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	200000e0 	.word	0x200000e0

080081cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4907      	ldr	r1, [pc, #28]	@ (8008200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081e2:	4808      	ldr	r0, [pc, #32]	@ (8008204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081e4:	f7ff fdc6 	bl	8007d74 <USBD_GetString>
 80081e8:	e004      	b.n	80081f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4904      	ldr	r1, [pc, #16]	@ (8008200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ee:	4805      	ldr	r0, [pc, #20]	@ (8008204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f0:	f7ff fdc0 	bl	8007d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f4:	4b02      	ldr	r3, [pc, #8]	@ (8008200 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000dc4 	.word	0x20000dc4
 8008204:	080089cc 	.word	0x080089cc

08008208 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4907      	ldr	r1, [pc, #28]	@ (800823c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800821e:	4808      	ldr	r0, [pc, #32]	@ (8008240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008220:	f7ff fda8 	bl	8007d74 <USBD_GetString>
 8008224:	e004      	b.n	8008230 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	4904      	ldr	r1, [pc, #16]	@ (800823c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800822a:	4805      	ldr	r0, [pc, #20]	@ (8008240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800822c:	f7ff fda2 	bl	8007d74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008230:	4b02      	ldr	r3, [pc, #8]	@ (800823c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000dc4 	.word	0x20000dc4
 8008240:	080089d8 	.word	0x080089d8

08008244 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800824a:	4b0f      	ldr	r3, [pc, #60]	@ (8008288 <Get_SerialNum+0x44>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008250:	4b0e      	ldr	r3, [pc, #56]	@ (800828c <Get_SerialNum+0x48>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008256:	4b0e      	ldr	r3, [pc, #56]	@ (8008290 <Get_SerialNum+0x4c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4413      	add	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800826a:	2208      	movs	r2, #8
 800826c:	4909      	ldr	r1, [pc, #36]	@ (8008294 <Get_SerialNum+0x50>)
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f814 	bl	800829c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008274:	2204      	movs	r2, #4
 8008276:	4908      	ldr	r1, [pc, #32]	@ (8008298 <Get_SerialNum+0x54>)
 8008278:	68b8      	ldr	r0, [r7, #8]
 800827a:	f000 f80f 	bl	800829c <IntToUnicode>
  }
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	1fff7a10 	.word	0x1fff7a10
 800828c:	1fff7a14 	.word	0x1fff7a14
 8008290:	1fff7a18 	.word	0x1fff7a18
 8008294:	200000e2 	.word	0x200000e2
 8008298:	200000f2 	.word	0x200000f2

0800829c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
 80082b2:	e027      	b.n	8008304 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	0f1b      	lsrs	r3, r3, #28
 80082b8:	2b09      	cmp	r3, #9
 80082ba:	d80b      	bhi.n	80082d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0f1b      	lsrs	r3, r3, #28
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	4619      	mov	r1, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	440b      	add	r3, r1
 80082cc:	3230      	adds	r2, #48	@ 0x30
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]
 80082d2:	e00a      	b.n	80082ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	0f1b      	lsrs	r3, r3, #28
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4619      	mov	r1, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	440b      	add	r3, r1
 80082e4:	3237      	adds	r2, #55	@ 0x37
 80082e6:	b2d2      	uxtb	r2, r2
 80082e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	3301      	adds	r3, #1
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	4413      	add	r3, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	3301      	adds	r3, #1
 8008302:	75fb      	strb	r3, [r7, #23]
 8008304:	7dfa      	ldrb	r2, [r7, #23]
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	429a      	cmp	r2, r3
 800830a:	d3d3      	bcc.n	80082b4 <IntToUnicode+0x18>
  }
}
 800830c:	bf00      	nop
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
	...

0800831c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	@ 0x28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	605a      	str	r2, [r3, #4]
 800832e:	609a      	str	r2, [r3, #8]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800833c:	d13a      	bne.n	80083b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	4b1e      	ldr	r3, [pc, #120]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008346:	4a1d      	ldr	r2, [pc, #116]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6313      	str	r3, [r2, #48]	@ 0x30
 800834e:	4b1b      	ldr	r3, [pc, #108]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 8008350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	613b      	str	r3, [r7, #16]
 8008358:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800835a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800835e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008360:	2302      	movs	r3, #2
 8008362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008368:	2303      	movs	r3, #3
 800836a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800836c:	230a      	movs	r3, #10
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4619      	mov	r1, r3
 8008376:	4812      	ldr	r0, [pc, #72]	@ (80083c0 <HAL_PCD_MspInit+0xa4>)
 8008378:	f7f9 fccc 	bl	8001d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800837c:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 800837e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008380:	4a0e      	ldr	r2, [pc, #56]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 8008382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008386:	6353      	str	r3, [r2, #52]	@ 0x34
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 800838e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008390:	4a0a      	ldr	r2, [pc, #40]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 8008392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008396:	6453      	str	r3, [r2, #68]	@ 0x44
 8008398:	4b08      	ldr	r3, [pc, #32]	@ (80083bc <HAL_PCD_MspInit+0xa0>)
 800839a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083a4:	2200      	movs	r2, #0
 80083a6:	2100      	movs	r1, #0
 80083a8:	2043      	movs	r0, #67	@ 0x43
 80083aa:	f7f9 f992 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083ae:	2043      	movs	r0, #67	@ 0x43
 80083b0:	f7f9 f9ab 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083b4:	bf00      	nop
 80083b6:	3728      	adds	r7, #40	@ 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	40023800 	.word	0x40023800
 80083c0:	40020000 	.word	0x40020000

080083c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7fe fb51 	bl	8006a82 <USBD_LL_SetupStage>
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80083fa:	78fa      	ldrb	r2, [r7, #3]
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	4619      	mov	r1, r3
 8008412:	f7fe fb8b 	bl	8006b2c <USBD_LL_DataOutStage>
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	3320      	adds	r3, #32
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	4619      	mov	r1, r3
 8008446:	f7fe fc2d 	bl	8006ca4 <USBD_LL_DataInStage>
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fd71 	bl	8006f48 <USBD_LL_SOF>
}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008476:	2301      	movs	r3, #1
 8008478:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	79db      	ldrb	r3, [r3, #7]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d001      	beq.n	8008486 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008482:	f7f8 f9d1 	bl	8000828 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800848c:	7bfa      	ldrb	r2, [r7, #15]
 800848e:	4611      	mov	r1, r2
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe fd15 	bl	8006ec0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fcbc 	bl	8006e1a <USBD_LL_Reset>
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fd10 	bl	8006ee0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6812      	ldr	r2, [r2, #0]
 80084ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084d2:	f043 0301 	orr.w	r3, r3, #1
 80084d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	7adb      	ldrb	r3, [r3, #11]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084e0:	4b04      	ldr	r3, [pc, #16]	@ (80084f4 <HAL_PCD_SuspendCallback+0x48>)
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	4a03      	ldr	r2, [pc, #12]	@ (80084f4 <HAL_PCD_SuspendCallback+0x48>)
 80084e6:	f043 0306 	orr.w	r3, r3, #6
 80084ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	e000ed00 	.word	0xe000ed00

080084f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fd06 	bl	8006f18 <USBD_LL_Resume>
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fd5e 	bl	8006fec <USBD_LL_IsoOUTIncomplete>
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800854a:	78fa      	ldrb	r2, [r7, #3]
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fd1a 	bl	8006f88 <USBD_LL_IsoINIncomplete>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fd70 	bl	8007050 <USBD_LL_DevConnected>
}
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fd6d 	bl	8007066 <USBD_LL_DevDisconnected>
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d13c      	bne.n	800861e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085a4:	4a20      	ldr	r2, [pc, #128]	@ (8008628 <USBD_LL_Init+0x94>)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008628 <USBD_LL_Init+0x94>)
 80085b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008628 <USBD_LL_Init+0x94>)
 80085b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80085ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008628 <USBD_LL_Init+0x94>)
 80085be:	2204      	movs	r2, #4
 80085c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085c2:	4b19      	ldr	r3, [pc, #100]	@ (8008628 <USBD_LL_Init+0x94>)
 80085c4:	2202      	movs	r2, #2
 80085c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085c8:	4b17      	ldr	r3, [pc, #92]	@ (8008628 <USBD_LL_Init+0x94>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80085ce:	4b16      	ldr	r3, [pc, #88]	@ (8008628 <USBD_LL_Init+0x94>)
 80085d0:	2202      	movs	r2, #2
 80085d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085d4:	4b14      	ldr	r3, [pc, #80]	@ (8008628 <USBD_LL_Init+0x94>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80085da:	4b13      	ldr	r3, [pc, #76]	@ (8008628 <USBD_LL_Init+0x94>)
 80085dc:	2200      	movs	r2, #0
 80085de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80085e0:	4b11      	ldr	r3, [pc, #68]	@ (8008628 <USBD_LL_Init+0x94>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80085e6:	4b10      	ldr	r3, [pc, #64]	@ (8008628 <USBD_LL_Init+0x94>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80085ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008628 <USBD_LL_Init+0x94>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80085f2:	480d      	ldr	r0, [pc, #52]	@ (8008628 <USBD_LL_Init+0x94>)
 80085f4:	f7f9 fd12 	bl	800201c <HAL_PCD_Init>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80085fe:	f7f8 f913 	bl	8000828 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008602:	2180      	movs	r1, #128	@ 0x80
 8008604:	4808      	ldr	r0, [pc, #32]	@ (8008628 <USBD_LL_Init+0x94>)
 8008606:	f7fa ff3e 	bl	8003486 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800860a:	2240      	movs	r2, #64	@ 0x40
 800860c:	2100      	movs	r1, #0
 800860e:	4806      	ldr	r0, [pc, #24]	@ (8008628 <USBD_LL_Init+0x94>)
 8008610:	f7fa fef2 	bl	80033f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008614:	2280      	movs	r2, #128	@ 0x80
 8008616:	2101      	movs	r1, #1
 8008618:	4803      	ldr	r0, [pc, #12]	@ (8008628 <USBD_LL_Init+0x94>)
 800861a:	f7fa feed 	bl	80033f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000fc4 	.word	0x20000fc4

0800862c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008642:	4618      	mov	r0, r3
 8008644:	f7f9 fdf9 	bl	800223a <HAL_PCD_Start>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f942 	bl	80088d8 <USBD_Get_USB_Status>
 8008654:	4603      	mov	r3, r0
 8008656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008658:	7bbb      	ldrb	r3, [r7, #14]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	4608      	mov	r0, r1
 800866c:	4611      	mov	r1, r2
 800866e:	461a      	mov	r2, r3
 8008670:	4603      	mov	r3, r0
 8008672:	70fb      	strb	r3, [r7, #3]
 8008674:	460b      	mov	r3, r1
 8008676:	70bb      	strb	r3, [r7, #2]
 8008678:	4613      	mov	r3, r2
 800867a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800868a:	78bb      	ldrb	r3, [r7, #2]
 800868c:	883a      	ldrh	r2, [r7, #0]
 800868e:	78f9      	ldrb	r1, [r7, #3]
 8008690:	f7fa facd 	bl	8002c2e <HAL_PCD_EP_Open>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f91c 	bl	80088d8 <USBD_Get_USB_Status>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086c8:	78fa      	ldrb	r2, [r7, #3]
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fa fb18 	bl	8002d02 <HAL_PCD_EP_Close>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f8fd 	bl	80088d8 <USBD_Get_USB_Status>
 80086de:	4603      	mov	r3, r0
 80086e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008706:	78fa      	ldrb	r2, [r7, #3]
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7fa fbd0 	bl	8002eb0 <HAL_PCD_EP_SetStall>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f8de 	bl	80088d8 <USBD_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	460b      	mov	r3, r1
 8008734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f7fa fc14 	bl	8002f76 <HAL_PCD_EP_ClrStall>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	4618      	mov	r0, r3
 8008756:	f000 f8bf 	bl	80088d8 <USBD_Get_USB_Status>
 800875a:	4603      	mov	r3, r0
 800875c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800877a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800877c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008780:	2b00      	cmp	r3, #0
 8008782:	da0b      	bge.n	800879c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800878a:	68f9      	ldr	r1, [r7, #12]
 800878c:	4613      	mov	r3, r2
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	3316      	adds	r3, #22
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	e00b      	b.n	80087b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087a2:	68f9      	ldr	r1, [r7, #12]
 80087a4:	4613      	mov	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80087b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fa fa01 	bl	8002be6 <HAL_PCD_SetAddress>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f874 	bl	80088d8 <USBD_Get_USB_Status>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b086      	sub	sp, #24
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
 800880a:	460b      	mov	r3, r1
 800880c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800881c:	7af9      	ldrb	r1, [r7, #11]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	f7fa fb0b 	bl	8002e3c <HAL_PCD_EP_Transmit>
 8008826:	4603      	mov	r3, r0
 8008828:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 f853 	bl	80088d8 <USBD_Get_USB_Status>
 8008832:	4603      	mov	r3, r0
 8008834:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008836:	7dbb      	ldrb	r3, [r7, #22]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	460b      	mov	r3, r1
 800884e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800885e:	7af9      	ldrb	r1, [r7, #11]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	f7fa fa97 	bl	8002d96 <HAL_PCD_EP_Receive>
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f832 	bl	80088d8 <USBD_Get_USB_Status>
 8008874:	4603      	mov	r3, r0
 8008876:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008878:	7dbb      	ldrb	r3, [r7, #22]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7fa fab7 	bl	8002e0c <HAL_PCD_EP_GetRxCount>
 800889e:	4603      	mov	r3, r0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088b0:	4b03      	ldr	r3, [pc, #12]	@ (80088c0 <USBD_static_malloc+0x18>)
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	200014a8 	.word	0x200014a8

080088c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]

}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d817      	bhi.n	800891c <USBD_Get_USB_Status+0x44>
 80088ec:	a201      	add	r2, pc, #4	@ (adr r2, 80088f4 <USBD_Get_USB_Status+0x1c>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	08008905 	.word	0x08008905
 80088f8:	0800890b 	.word	0x0800890b
 80088fc:	08008911 	.word	0x08008911
 8008900:	08008917 	.word	0x08008917
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]
    break;
 8008908:	e00b      	b.n	8008922 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800890a:	2303      	movs	r3, #3
 800890c:	73fb      	strb	r3, [r7, #15]
    break;
 800890e:	e008      	b.n	8008922 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008910:	2301      	movs	r3, #1
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	e005      	b.n	8008922 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	73fb      	strb	r3, [r7, #15]
    break;
 800891a:	e002      	b.n	8008922 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	73fb      	strb	r3, [r7, #15]
    break;
 8008920:	bf00      	nop
  }
  return usb_status;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <memset>:
 8008930:	4402      	add	r2, r0
 8008932:	4603      	mov	r3, r0
 8008934:	4293      	cmp	r3, r2
 8008936:	d100      	bne.n	800893a <memset+0xa>
 8008938:	4770      	bx	lr
 800893a:	f803 1b01 	strb.w	r1, [r3], #1
 800893e:	e7f9      	b.n	8008934 <memset+0x4>

08008940 <__libc_init_array>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	4d0d      	ldr	r5, [pc, #52]	@ (8008978 <__libc_init_array+0x38>)
 8008944:	4c0d      	ldr	r4, [pc, #52]	@ (800897c <__libc_init_array+0x3c>)
 8008946:	1b64      	subs	r4, r4, r5
 8008948:	10a4      	asrs	r4, r4, #2
 800894a:	2600      	movs	r6, #0
 800894c:	42a6      	cmp	r6, r4
 800894e:	d109      	bne.n	8008964 <__libc_init_array+0x24>
 8008950:	4d0b      	ldr	r5, [pc, #44]	@ (8008980 <__libc_init_array+0x40>)
 8008952:	4c0c      	ldr	r4, [pc, #48]	@ (8008984 <__libc_init_array+0x44>)
 8008954:	f000 f818 	bl	8008988 <_init>
 8008958:	1b64      	subs	r4, r4, r5
 800895a:	10a4      	asrs	r4, r4, #2
 800895c:	2600      	movs	r6, #0
 800895e:	42a6      	cmp	r6, r4
 8008960:	d105      	bne.n	800896e <__libc_init_array+0x2e>
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	f855 3b04 	ldr.w	r3, [r5], #4
 8008968:	4798      	blx	r3
 800896a:	3601      	adds	r6, #1
 800896c:	e7ee      	b.n	800894c <__libc_init_array+0xc>
 800896e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008972:	4798      	blx	r3
 8008974:	3601      	adds	r6, #1
 8008976:	e7f2      	b.n	800895e <__libc_init_array+0x1e>
 8008978:	08008a08 	.word	0x08008a08
 800897c:	08008a08 	.word	0x08008a08
 8008980:	08008a08 	.word	0x08008a08
 8008984:	08008a0c 	.word	0x08008a0c

08008988 <_init>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr

08008994 <_fini>:
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	bf00      	nop
 8008998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899a:	bc08      	pop	{r3}
 800899c:	469e      	mov	lr, r3
 800899e:	4770      	bx	lr
